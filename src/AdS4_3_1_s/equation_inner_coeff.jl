
#= tilde, hat, etc, definitions

We use these macros as shorthand notation. For instance

  @tilde_inner("B")

should expand to

  Bt = B_x -  (Fx * u + xi_x) * Bp

etc.

=#
macro tilde_inner(fname::String)
    ft    = Symbol(fname, "t")
    f_x   = Symbol(fname, "_x")
    fp    = Symbol(fname, "p")
    return esc( :($ft = $f_x - (Fx * u + xi_x) * $fp) )
end
macro hat_inner(fname::String)
    fh    = Symbol(fname, "h")
    f_y   = Symbol(fname, "_y")
    fp    = Symbol(fname, "p")
    return esc( :($fh = $f_y - (Fy * u + xi_y) * $fp) )
end

macro bar_inner(fname::String)
    fb    = Symbol(fname, "b")
    f_xx  = Symbol(fname, "_xx")
    fpp   = Symbol(fname, "pp")
    fp_x  = Symbol(fname, "p_x")
    return esc( :($fb = $f_xx + (Fx * u + xi_x) * ( -2*($fp_x) + (Fx * u + xi_x) * ($fpp) )) )
end

macro star_inner(fname::String)
    fs    = Symbol(fname, "s")
    f_yy  = Symbol(fname, "_yy")
    fpp   = Symbol(fname, "pp")
    fp_y  = Symbol(fname, "p_y")
    return esc( :($fs = $f_yy + (Fy * u + xi_y) * ( -2*($fp_y) + (Fy * u + xi_y)* ($fpp) )) )
end

macro cross_inner(fname::String)
    fc    = Symbol(fname, "c")
    f_xy  = Symbol(fname, "_xy")
    fpp   = Symbol(fname, "pp")
    fp_x  = Symbol(fname, "p_x")
    fp_y  = Symbol(fname, "p_y")
    return esc( :($fc = $f_xy  - (Fx * u + xi_x) * ($fp_y) -
                  (Fy * u + xi_y) * ( $fp_x -(Fx * u + xi_x) * ($fpp) ) ) )
end



# assuming
# (A d_uu + B d_u + C Id) f = -S

function S_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    (S0, S0_t, u, xi, B, Bp, G, Gp) = vars


x0 = u ^ 2
x1 = Gp ^ 2
x2 = u ^ 4
x3 = G * Gp
x4 = G ^ 2
x5 = B * u
x6 = (Bp - 3 * x5) ^ 2
x7 = G * u ^ 3
ABCS[1] = 4 * x0
ABCS[2] = 24 * u
ABCS[3] = 9 * u ^ 6 * x4 - 6 * u ^ 5 * x3 + x1 * x2 + x2 * x6 * cosh(x7) ^ 2 + 24
ABCS[4] = u * (S0 * u * xi + S0 + S0_t * u) * (9 * B ^ 2 * x0 + Bp ^ 2 - 6 * Bp * x5 - 12 * u * x3 + 18 * x0 * x4 + 2 * x1 + x6 * cosh(2 * x7)) / 2

    nothing
end


# this is a coupled equation for Fx and Fy. the notation used is
#
# ( A11 d_uu Fx + A12 d_uu Fy + B11 d_u Fx + B12 d_u Fy + C11 Fx + C12 Fy ) = -S1
# ( A21 d_uu Fx + A22 d_uu Fy + B21 d_u Fx + B22 d_u Fy + C21 Fx + C22 Fy ) = -S2

function Fxy_eq_coeff!(AA::Matrix, BB::Matrix, CC::Matrix, SS::Vector, vars::Tuple, ::Inner)
    (
        S0, S0_x, S0_y, S0_t, S0_tx, S0_ty, u, xi, xi_x, xi_y,
        B     ,        G      ,       S      ,
        Bp    ,        Gp     ,       Sp     ,
        Bpp   ,        Gpp    ,       Spp    ,
        B_x   ,        G_x    ,       S_x    ,
        B_y   ,        G_y    ,       S_y    ,
        Bp_x  ,        Gp_x   ,       Sp_x   ,
        Bp_y  ,        Gp_y   ,       Sp_y   ,
       
    ) = vars
    
    
x0 = u ^ 3
x1 = B * x0
x2 = exp(x1)
x3 = S0_t * u
x4 = u * xi
x5 = S0 * x4
x6 = S * x0
x7 = S0 + x5 + x6
x8 = x3 + x7
x9 = x8 ^ 2
x10 = x2 * x9
x11 = 2 * u
x12 = 3 * x1
x13 = u ^ 2
x14 = Bp * x13
x15 = -x14
x16 = 3 * B
x17 = u * x16
x18 = -Bp + x17
x19 = G * x0
x20 = 2 * x19
x21 = cosh(x20)
x22 = x13 * x21
x23 = 2 * Gp
x24 = 6 * G
x25 = u * x24
x26 = -x18
x27 = sinh(x20)
x28 = x26 * x27
x29 = S0 ^ 2
x30 = Bpp * x29
x31 = 4 * S0
x32 = Spp * u
x33 = Bpp * u
x34 = Sp * x13
x35 = u ^ 4
x36 = Sp * x35
x37 = S * x35
x38 = Bpp * x37
x39 = u ^ 6
x40 = S * x39
x41 = B * x40
x42 = 12 * S0
x43 = u ^ 5
x44 = Sp * x43
x45 = 9 * S
x46 = Bp * x43
x47 = 6 * S0
x48 = S0 * xi
x49 = x13 * x48
x50 = Bp ^ 2
x51 = u ^ 7
x52 = S * x51
x53 = x50 * x52
x54 = x35 * x50
x55 = u ^ 8
x56 = 6 * S
x57 = B * x56
x58 = B * x47
x59 = 15 * x35
x60 = B * x48
x61 = Bp * x48
x62 = 12 * S
x63 = G * Gp
x64 = x55 * x63
x65 = 12 * x43
x66 = x63 * x65
x67 = B ^ 2
x68 = u ^ 9
x69 = x45 * x68
x70 = 9 * x39
x71 = x67 * x70
x72 = G ^ 2
x73 = 18 * x72
x74 = S * x68
x75 = x39 * x73
x76 = Gp ^ 2
x77 = x52 * x76
x78 = 2 * S0
x79 = x35 * x76
x80 = x43 * x50
x81 = 6 * B
x82 = 12 * x63
x83 = x39 * x82
x84 = 9 * x67
x85 = x48 * x51
x86 = 2 * x76
x87 = x43 * x48
x88 = 3 * G
x89 = u * x88
x90 = Gp - x89
x91 = x28 * x35 * x90
x92 = 2 * x91
x93 = Bpp * x7
x94 = x13 * x50
x95 = x7 * x94
x96 = 7 * x4
x97 = x4 + 1
x98 = 6 * x1
x99 = x97 * x98
x100 = x96 + x99
x101 = -Sp
x102 = S * u
x103 = 9 * x102
x104 = x35 * x57
x105 = 5 * x4
x106 = x105 + x12 * x97
x107 = x12 + 7
x108 = u * x21
x109 = 2 * S0_t
x110 = S ^ 2
x111 = Bpp * x110
x112 = 15 * x1
x113 = 7 * x14
x114 = x12 + 5
x115 = Bpp + u * (-Bp * (x98 + 7) + x114 * x17 + x94)
x116 = S0_t ^ 2
x117 = u * x116
x118 = x110 * x68
x119 = x0 * x29
x120 = 2 * Sp
x121 = -x120
x122 = 3 * S
x123 = u * x122
x124 = x21 * x7
x125 = Bp * x110
x126 = u * x29
x127 = B * x29
x128 = 9 * x13
x129 = u ^ 11 * x110
x130 = x29 * x67
x131 = 9 * x130
x132 = B * x55
x133 = xi ^ 2
x134 = x133 * x30
x135 = x133 * x29
x136 = Bp * S0
x137 = x29 * xi
x138 = 12 * x137
x139 = Bp * x133
x140 = u ^ 10
x141 = x29 * x35
x142 = Bp * x81
x143 = x51 * x57
x144 = Bp * x40
x145 = x0 * x136
x146 = Bpp * x78
x147 = x50 * x78
x148 = 2 * x137
x149 = x133 * x51
x150 = x127 * x133
x151 = 18 * x67
x152 = S0 * x55
x153 = S * x152
x154 = x137 * x39
x155 = 24 * x137
x156 = B * S0
x157 = x156 * x43
x158 = 36 * S
x159 = S * x43
x160 = 12 * B
x161 = B * x137
x162 = x135 * x39
x163 = x110 * x140
x164 = B * x27
x165 = 6 * x164
x166 = Gp * x165
x167 = x163 * x166
x168 = x141 * x166
x169 = Bp * x27
x170 = x169 * x24
x171 = x163 * x170
x172 = x141 * x170
x173 = x169 * x23
x174 = x118 * x173
x175 = x119 * x173
x176 = x35 * x61
x177 = 2 * x48
x178 = 18 * G
x179 = x164 * x178
x180 = x129 * x179
x181 = x29 * x43
x182 = x179 * x181
x183 = x48 * x74
x184 = Gp * x164
x185 = x184 * x42
x186 = x185 * x52
x187 = Gp * xi
x188 = x164 * x187
x189 = x188 * x29 * x65
x190 = G * x42
x191 = x169 * x52
x192 = x190 * x191
x193 = G * x169
x194 = x137 * x193 * x65
x195 = x162 * x166
x196 = x162 * x170
x197 = x135 * x173 * x43
x198 = Gp * x31
x199 = x169 * x198
x200 = x199 * x40
x201 = 4 * x187
x202 = x169 * x201
x203 = x141 * x202
x204 = x135 * x179 * x51
x205 = G * S
x206 = 36 * x164
x207 = x152 * x205 * x206
x208 = 36 * G
x209 = x164 * x208
x210 = x154 * x209
x211 = Gp * x48
x212 = x164 * x211 * x55 * x62
x213 = 12 * G
x214 = S * x213
x215 = x169 * x214
x216 = x215 * x48 * x55
x217 = x187 * x31
x218 = x191 * x217
x219 = x183 * x209
x220 = 4 * Sp ^ 2
x221 = Spp * x31
x222 = S0 * u
x223 = 24 * Sp
x224 = 4 * Spp
x225 = x29 * x73
x226 = S0 * x13
x227 = 16 * x48
x228 = x135 * x86
x229 = x31 * x76
x230 = 4 * x137
x231 = 36 * x72
x232 = 24 * x63
x233 = 24 * G
x234 = x187 * x233
x235 = x31 * xi
x236 = 24 * x48
x237 = 48 * S * x226 - S * x236 * x64 - S0 * x232 * x52 - x0 * x220 + x110 * x65 + x118 * x86 + x119 * x86 + 4 * x126 * x133 + x129 * x73 - x135 * x83 + 8 * x137 - x141 * x82 + x149 * x225 + x153 * x231 + x154 * x231 - x163 * x82 - x181 * x234 + x183 * x231 + x221 * x4 + x221 - x222 * x223 + x224 * x6 + x225 * x43 - x227 * x34 + x228 * x43 + x229 * x40 + x230 * x79 + x235 * x77 + 32 * x48 * x6
x238 = 2 * Gpp
x239 = S0 * x238
x240 = 2 * x21
x241 = x0 * x26 * x90
x242 = x240 * x241
x243 = -x12 + x14
x244 = Bpp - u * (Bp * (7 - x98) + x17 * (x12 - 5) + x94)
x245 = 22 * Gp * x37
x246 = x213 * x36
x247 = 10 * Gp * x222
x248 = x238 * x6
x249 = 4 * Gp
x250 = Sp * x249
x251 = x0 * x250
x252 = x178 * x226
x253 = 54 * x205 * x43
x254 = x27 * x50
x255 = x254 * x40
x256 = S0 * x254
x257 = x0 * x256
x258 = 14 * Gp * x49
x259 = x27 * x67
x260 = x259 * x45 * x55
x261 = S0 * x27
x262 = x261 * x84
x263 = x262 * x43
x264 = x238 * x5
x265 = 30 * x19 * x48
x266 = x27 * x48
x267 = x266 * x54
x268 = x266 * x71
x269 = x143 * x169
x270 = x35 * x58
x271 = x169 * x270
x272 = x169 * x81
x273 = x272 * x87
x274 = Bpp * x27
x275 = S0 * x274
x276 = x120 * x169
x277 = Bp * G
x278 = x136 * x24
x279 = S0 * x164
x280 = Gp * x81
x281 = Gp * x143 + Gp * x270 - S * x132 * x178 + x0 * x276 + x112 * x266 - x113 * x266 + 2 * x124 * x241 + x128 * x279 - x144 * x23 - x145 * x23 - x157 * x178 + 27 * x159 * x164 - x165 * x36 - 5 * x169 * x222 - 11 * x169 * x37 - x176 * x23 - x178 * x39 * x60 + x24 * x43 * x61 + x274 * x5 + x274 * x6 + x275 + x277 * x51 * x56 + x278 * x35 + x280 * x87
x282 = S0_tx * x2
x283 = 2 * G
x284 = x164 * x283
x285 = 2 * x72
x286 = x21 * x67
x287 = x285 + x286 + x67
x288 = x284 + x287
x289 = S0 * x288
x290 = x21 * x283
x291 = x164 + x283
x292 = B * S0_y
x293 = S0_x * x2
x294 = S0 * xi_y
x295 = sinh(x19)
x296 = cosh(x19)
x297 = x2 * xi_x
x298 = 1 / x29
x299 = x110 * x298
x300 = 9 * u ^ 12 * x299
x301 = S0_ty * x239
x302 = S0_t * S0_y
x303 = x29 * xi_y
x304 = Sp_x * x2
x305 = x304 * x31
x306 = x224 * x282
x307 = 4 * Sp
x308 = x293 * x307
x309 = x221 * x297
x310 = Bp_y * x27
x311 = x169 * x78
x312 = S0_ty * x275
x313 = x27 * xi_y
x314 = x30 * x313
x315 = 1 / S0
x316 = 4 * S0_t
x317 = Spp * x316
x318 = x315 * x317
x319 = x293 * x318
x320 = x296 ^ 2
x321 = Bp * x320
x322 = x31 * x321
x323 = x282 * x320
x324 = x109 * x293
x325 = Bpp * x320
x326 = x324 * x325
x327 = Bp_x * x2
x328 = 2 * x29
x329 = x320 * x328
x330 = 2 * x320
x331 = B_x * x2
x332 = x330 * x331
x333 = S0 * S0_ty
x334 = B * x333
x335 = S0_t * x292
x336 = x23 * x335
x337 = S0_ty * x136
x338 = Bp * S0_t
x339 = S0_y * x338
x340 = x127 * xi_y
x341 = x23 * x340
x342 = Bp * x303
x343 = B * x78
x344 = Bp * x282
x345 = 2 * x338
x346 = B * x293
x347 = x282 * x63
x348 = x31 * x347
x349 = S0_t * x293
x350 = x249 * x349
x351 = B * x311
x352 = x109 * x169
x353 = B * x21
x354 = x23 * x333
x355 = x290 * x339
x356 = G_y * x127
x357 = 2 * Bp
x358 = x127 * x297
x359 = x29 * x297
x360 = G * x249
x361 = x359 * x360
x362 = 2 * x169
x363 = x353 * x78
x364 = x293 * x353
x365 = x279 * x282
x366 = x164 * x23
x367 = S0 * x282
x368 = x169 * x283
x369 = x21 * x357
x370 = x359 * x366
x371 = G_x * x2
x372 = 3 * x129
x373 = 12 * S0_y
x374 = G * S0
x375 = x373 * x374
x376 = Gp * S0_ty
x377 = x376 * x42
x378 = x249 * x302
x379 = Gp_y * x31
x380 = Gpp * S0_ty
x381 = x316 * x380
x382 = 6 * G_y
x383 = x29 * x382
x384 = 8 * S0_y
x385 = S0_t * xi_y
x386 = Gpp * x31
x387 = x385 * x386
x388 = Gpp * x316
x389 = S0_y * xi
x390 = 12 * Gp
x391 = Gpp * xi_y
x392 = x293 * x62
x393 = S_x * x2
x394 = x393 * x42
x395 = 20 * Sp
x396 = S0_y * x116
x397 = x315 * x396
x398 = 4 * x397
x399 = S0 * x297
x400 = x308 * xi
x401 = S0_y * x164
x402 = x401 * x47
x403 = S0_ty * x169
x404 = x403 * x47
x405 = S0_y * x109
x406 = x310 * x78
x407 = S0_ty * x274
x408 = x109 * x407
x409 = B_y * x29
x410 = 3 * x27
x411 = x169 * x235
x412 = x274 * x294
x413 = x405 * xi
x414 = 6 * x169
x415 = x282 * x315
x416 = x315 * x349
x417 = 2 * xi
x418 = x116 * x293
x419 = x298 * x418
x420 = 2 * x397
x421 = x320 * x42
x422 = x346 * x421
x423 = 12 * x320
x424 = x136 * x282
x425 = x423 * x424
x426 = 4 * x320
x427 = x338 * x426
x428 = x316 * x325
x429 = 6 * x320
x430 = x29 * x331
x431 = x320 * x61
x432 = S0_t * x297
x433 = x31 * x325
x434 = x235 * x325
x435 = x293 * xi
x436 = 12 * x321
x437 = x30 * x426 * xi
x438 = S0_t + x48
x439 = x320 * x327
x440 = x31 * x439
x441 = x116 * x315
x442 = x293 * x441
x443 = x426 * x442
x444 = B * S0_t
x445 = x208 * x444
x446 = x23 * x337
x447 = x23 * x339
x448 = x116 * x292
x449 = x208 * x448
x450 = S0_t * x48
x451 = x292 * x450
x452 = x208 * x451
x453 = x127 * x385
x454 = x208 * x453
x455 = S0_ty * x208
x456 = S0 ^ 3
x457 = x456 * xi_y
x458 = B * x457
x459 = x208 * xi
x460 = x23 * x342
x461 = x254 * x333
x462 = S0_t * x231
x463 = x2 * x29
x464 = G_x * x23
x465 = x463 * x464
x466 = x282 * x76
x467 = x466 * x78
x468 = x324 * x76
x469 = S0_t * x353
x470 = x208 * x469
x471 = x21 * x446
x472 = x21 * x447
x473 = x151 * x27
x474 = S0_t * x333
x475 = G_y * x29
x476 = S * x357
x477 = x21 * x476
x478 = x254 * x302
x479 = x231 * x450
x480 = x254 * x303
x481 = x137 * x231
x482 = x297 * x456
x483 = x231 * xi
x484 = x297 * x86
x485 = x29 * x484
x486 = x137 * x353
x487 = x302 * x67
x488 = x21 * x460
x489 = 18 * x27
x490 = x130 * xi_y
x491 = S0_t * x490
x492 = x169 + x23
x493 = B_y * S
x494 = S0_t * x282
x495 = x173 * x367
x496 = x173 * x349
x497 = S * x362
x498 = G_x * x463
x499 = x293 * x450
x500 = 36 * x320
x501 = x500 * x67
x502 = S0_t * x501
x503 = x320 * x476
x504 = x147 * x323
x505 = x320 * x50
x506 = x324 * x505
x507 = x137 * x282
x508 = x164 * xi
x509 = x208 * x508
x510 = S * x297
x511 = x29 * x510
x512 = x501 * xi
x513 = x329 * x50
x514 = S * x298
x515 = x140 * x514
x516 = x233 * x333
x517 = G_y * x42
x518 = S0_t * x517
x519 = S0_y * x233
x520 = 16 * x187
x521 = x233 * x303
x522 = G_y * x138
x523 = x116 * xi_y
x524 = 20 * Gp
x525 = S0_t ^ 3
x526 = S0_ty * x315
x527 = x116 * x526
x528 = x135 * xi_y
x529 = S * xi
x530 = x293 * x529
x531 = 16 * Sp
x532 = x297 * x531
x533 = x282 * x531
x534 = S0_ty * x164
x535 = x42 * x534
x536 = B_y * x27
x537 = S0_t * x47
x538 = x164 * x373
x539 = 8 * S0_t
x540 = 12 * x164
x541 = x303 * x540
x542 = 40 * S
x543 = S0_t * x315
x544 = x48 * xi_y
x545 = x109 * x544
x546 = 10 * x169
x547 = 24 * x320
x548 = x338 * x547
x549 = x282 * x548
x550 = x282 * x61
x551 = x155 * x297
x552 = x321 * x551
x553 = x438 ^ 2
x554 = Bpp * x330
x555 = x298 * x525
x556 = x293 * x555
x557 = x435 * x441
x558 = x426 * x557
x559 = 8 * x205
x560 = S0 * x24
x561 = x283 * x338
x562 = S0_ty * x161
x563 = x23 * xi
x564 = Bp * S0_ty
x565 = x283 * xi
x566 = S * x31
x567 = x293 * x537
x568 = S0_t * S0_ty
x569 = B * x568
x570 = x127 * x24
x571 = x24 * x457
x572 = x109 * x21
x573 = G_y * x456
x574 = B * xi
x575 = x240 * x574
x576 = 4 * S
x577 = x164 * x303
x578 = S0 * x410
x579 = Bp * x396
x580 = G * x201
x581 = x458 * xi
x582 = B * x320
x583 = x293 * x539
x584 = x349 * x560
x585 = S0_t * x169 * x283
x586 = x31 * x338
x587 = x164 * x563
x588 = x482 * x565
x589 = B * x321
x590 = 4 * x321
x591 = x482 * x574
x592 = x298 * x56
x593 = x592 * x68
x594 = 48 * G
x595 = x568 * x594
x596 = S * x249
x597 = S0_y * x596
x598 = S * x379
x599 = x380 * x576
x600 = x116 * x382
x601 = S0_t * x594
x602 = S0_ty * x48
x603 = x233 * x302
x604 = 12 * x450
x605 = G_y * x604
x606 = Sp * xi_y
x607 = 24 * S0_t
x608 = S0_ty * x187
x609 = S * xi_y
x610 = x211 * xi_y
x611 = x137 * xi_y
x612 = Gp * x373
x613 = S0_t * x133
x614 = x133 * x383
x615 = x302 * x315
x616 = S * x316
x617 = S0_y * x616
x618 = x315 * x617
x619 = x208 * x397
x620 = 12 * x376
x621 = 24 * x529
x622 = 24 * x187
x623 = x534 * x607
x624 = S0_ty * x276
x625 = 2 * S
x626 = x164 * x294
x627 = S0_t * x373
x628 = 12 * x169
x629 = x568 * x628
x630 = x629 * xi
x631 = S * x607
x632 = S * x315
x633 = x450 * xi_y
x634 = x628 * x633
x635 = x155 * xi_y
x636 = x133 * x302
x637 = Spp * x298
x638 = x293 * x616
x639 = x315 * x530
x640 = 24 * x514
x641 = x220 * x298
x642 = x276 * x615
x643 = x405 * x632
x644 = 18 * x164
x645 = S0_y * x555
x646 = x373 * x441
x647 = x169 * x646
x648 = 48 * x320
x649 = x444 * x648
x650 = x282 * x649
x651 = x321 * x576
x652 = x293 * x651
x653 = x282 * x307
x654 = x321 * x653
x655 = x282 * x576
x656 = x325 * x655
x657 = x282 * x60
x658 = x582 * x607
x659 = Sp * x297
x660 = x116 * x297
x661 = x320 * x338
x662 = x161 * x297
x663 = x293 * x338
x664 = x315 * x661
x665 = x315 * x638
x666 = x116 * x415
x667 = x135 * x297
x668 = 24 * x321
x669 = 3 * x133
x670 = Bp - x669
x671 = 3 * x116
x672 = 6 * x450
x673 = x671 + x672
x674 = Bp + x669
x675 = x27 * x671 + x27 * x672
x676 = S_y * x213
x677 = B * x62
x678 = x214 * x564
x679 = Sp * x213
x680 = x110 * xi_y
x681 = Gp * x677
x682 = Bp * x214
x683 = x294 * x682
x684 = x338 * xi_y
x685 = x596 * x684
x686 = Bp * x576 * x608
x687 = B * x178
x688 = B * x208
x689 = Bp * x609
x690 = x217 * x689
x691 = x333 * x687
x692 = x178 * x292
x693 = x613 * x692
x694 = S0_ty * Sp
x695 = x213 * x694
x696 = 20 * x110
x697 = Gp * x62
x698 = x315 * x335
x699 = x697 * x698
x700 = S * x373
x701 = G * x700
x702 = x315 * x338
x703 = x701 * x702
x704 = x338 * x526
x705 = x596 * x704
x706 = Sp * x298
x707 = x555 * x692
x708 = x150 * xi_y
x709 = x178 * x708
x710 = x299 * x302
x711 = x187 * x576
x712 = x315 * x711
x713 = x339 * x712
x714 = S_y * x164
x715 = x371 * x42
x716 = 24 * x282
x717 = S * x716
x718 = S0_t * x371
x719 = x292 * x441
x720 = x459 * x719
x721 = x116 * x298
x722 = x597 * x721
x723 = Bp * x722
x724 = S * x517
x725 = x376 * x62
x726 = x164 * x56
x727 = G_y * x21
x728 = x338 * x727
x729 = 24 * S
x730 = x399 * x63
x731 = S * x371
x732 = x297 * x76
x733 = x169 * x294
x734 = x208 * x568
x735 = x353 * x734
x736 = Bp * x727
x737 = x31 * x529
x738 = x178 * x353
x739 = x109 * x609
x740 = S0_ty * x254
x741 = 2 * x529
x742 = x297 * x529
x743 = x208 * x353
x744 = x367 * x73
x745 = x293 * x613
x746 = x333 * x738
x747 = x315 * x694
x748 = x177 * x609
x749 = x27 * x84
x750 = x333 * x749
x751 = 9 * x27
x752 = x487 * x751
x753 = x110 * x546
x754 = x616 * x76
x755 = x164 * x302
x756 = Sp * x592
x757 = x225 * x297
x758 = S * x109
x759 = x526 * x758
x760 = x315 * x754
x761 = x320 * x677
x762 = x490 * x751
x763 = S * x715
x764 = Gp * x282
x765 = x62 * x764
x766 = x169 * x282
x767 = x419 * x576
x768 = x315 * x405 * x529
x769 = x397 * xi
x770 = 2 * x254
x771 = x396 * x514
x772 = x169 * x42
x773 = x169 * x31
x774 = x529 * x773
x775 = x169 * x432
x776 = x169 * x187
x777 = 20 * x125
x778 = x320 * x777
x779 = B * x547
x780 = x136 * x510
x781 = x297 * x450
x782 = x217 * x510
x783 = x282 * xi
x784 = x297 * x616
x785 = x178 * x365
x786 = x151 * x320
x787 = Sp * x415
x788 = x31 * x505
x789 = x184 * x543
x790 = S0_t * x415
x791 = x169 * x596
x792 = x367 * x786
x793 = x293 * x661
x794 = x415 * x616
x795 = x208 * x442
x796 = 18 * x320
x797 = x130 * x297 * x796
x798 = x315 * x435 * x616
x799 = -x345
x800 = x357 * x48
x801 = -x800
x802 = x122 + x58 + x801
x803 = S * x331
x804 = -Gp * xi
x805 = x31 * (-x804 - x88)
x806 = S0_t * x492
x807 = -x58
x808 = x122 + x800 + x807
x809 = S_y * x42
x810 = 32 * S
x811 = S0_ty * x810
x812 = Gp * x811
x813 = S0_t * S_y
x814 = x376 * x58
x815 = 6 * Gp
x816 = x335 * x815
x817 = S0_ty * x278
x818 = x24 * x339
x819 = S0_ty * x338
x820 = x249 * x819
x821 = S0_y * x576
x822 = x198 * x684
x823 = x217 * x564
x824 = x201 * x339
x825 = x529 * xi_y
x826 = x280 * x303
x827 = x24 * x342
x828 = x201 * x342
x829 = G * Sp
x830 = x315 * x627 * x829
x831 = S * x615
x832 = 28 * Gp
x833 = x315 * x568
x834 = Sp * x315
x835 = x187 * x316
x836 = Gpp * x315
x837 = x389 * x616
x838 = Bp * x249
x839 = x397 * x838
x840 = x298 * x396
x841 = x576 * x840
x842 = x401 * x56
x843 = 16 * S
x844 = x282 * x42
x845 = x63 * x844
x846 = x316 * x466
x847 = x403 * x58
x848 = Sp * x165
x849 = x21 * x818
x850 = x169 * x843
x851 = S_y * x48
x852 = x48 * x625
x853 = x109 * x740
x854 = x229 * x432
x855 = x316 * x76
x856 = x544 * x607
x857 = x615 * x848
x858 = 24 * x508
x859 = 2 * x274
x860 = x392 * x582
x861 = B * x423
x862 = Sp * x282
x863 = x861 * x862
x864 = x282 * x810
x865 = x321 * x864
x866 = x282 * x47
x867 = x184 * x866
x868 = x169 * x494
x869 = x424 * x861
x870 = x297 * x810
x871 = x235 * x321
x872 = x307 * x320
x873 = x297 * x338
x874 = x323 * x50
x875 = x316 * x874
x876 = B * x781
x877 = x156 * x282
x878 = x316 * x505
x879 = -3 * B * S0 + x56 + x800
x880 = Sp * x861
x881 = x416 * x880
x882 = x338 * x415
x883 = x150 * x297
x884 = x346 * x441
x885 = S0 * x16 + x56 + x801
x886 = 72 * x205
x887 = S0_ty * x886
x888 = 12 * x187
x889 = x213 * x819
x890 = Bp * x523
x891 = B * x633
x892 = x213 * x338
x893 = x110 * x238
x894 = x376 * x441
x895 = Bp * x24
x896 = x158 * x164
x897 = 36 * x529
x898 = S0_t * x294
x899 = x353 * x898
x900 = x297 * x607
x901 = x487 * xi
x902 = x111 * x27
x903 = x292 * x815
x904 = S * x526
x905 = x277 * x646
x906 = x21 * x905
x907 = x110 * x2
x908 = x187 * x540
x909 = S0_t * x783
x910 = x169 * x213
x911 = x338 * x779
x912 = x164 * x390
x913 = x213 * x450
x914 = x160 * x321
x915 = x349 * xi
x916 = x133 * x560
x917 = x297 * x548
x918 = 72 * x320
x919 = x514 * x661
x920 = x139 * x423
x921 = x418 * x514
x922 = x298 * x320
x923 = x156 * x669 - x476
x924 = B * x671 + S0 * x923 + x450 * x81
x925 = x27 * x923
x926 = G_y * x62
x927 = x178 * x335
x928 = Gp * x810
x929 = x294 * x444
x930 = x60 * x620
x931 = x335 * x888
x932 = x294 * x892
x933 = x213 * x61
x934 = S0_ty * x933
x935 = x338 * x373
x936 = G * xi
x937 = x935 * x936
x938 = 4 * x338 * x608
x939 = x213 * x48
x940 = x178 * x340
x941 = x23 * x890
x942 = x217 * x684
x943 = x340 * x888
x944 = Bp * x213
x945 = x611 * x944
x946 = 60 * x205
x947 = x187 * x810
x948 = x390 * x719
x949 = Bp * x23
x950 = x645 * x949
x951 = x527 * x949
x952 = x528 * x949
x953 = 8 * x110
x954 = Bp * x187
x955 = x398 * x954
x956 = x116 * x2
x957 = x694 * xi
x958 = 16 * x529
x959 = G_y * x116
x960 = x137 * x213
x961 = x628 * xi
x962 = x165 * x48
x963 = x169 * x227
x964 = x233 * x359
x965 = x135 * x2
x966 = x138 * x169
x967 = 30 * x164
x968 = G_y * x135
x969 = x169 * x615
x970 = 16 * x169
x971 = 72 * S
x972 = x582 * x971
x973 = x423 * x444
x974 = S0_t * x715
x975 = G_x * x956
x976 = x282 * x338
x977 = x423 * x60
x978 = x282 * x48
x979 = x187 * x349
x980 = x138 * x371
x981 = x297 * x960
x982 = x330 * x50
x983 = x135 * x371
x984 = x349 * x632
x985 = x235 * x505
x986 = x664 * x810
x987 = x56 + x58 - x61
x988 = x331 * x438
x989 = x78 * (-x24 - x804)
x990 = x56 + x61 + x807
x991 = B_y * x438
x992 = -x23
x993 = Gp * x43
x994 = x70 * x72
x995 = x96 - x99
x996 = -3 * B * x0 * x97 + x105
x997 = u * x320
x998 = Sp_y * x31
x999 = S0_ty * x224
x1000 = S0_y * x307
x1001 = x239 * x282
x1002 = Gp_x * x2
x1003 = S0_ty * x320
x1004 = x1003 * x146
x1005 = x320 * x405
x1006 = Bp_y * x320
x1007 = x330 * xi_y
x1008 = x293 * x311
x1009 = Bp_x * x27
x1010 = x27 * x297
x1011 = B * x349
x1012 = x1010 * x130
x1013 = x164 - x283
x1014 = x1013 * x331
x1015 = x292 * x345
x1016 = S0_ty * x63
x1017 = x283 * x475
x1018 = x303 * x360
x1019 = x23 * x877
x1020 = B * x23
x1021 = x164 * x354
x1022 = x302 * x366
x1023 = x302 * x368
x1024 = G_y * x164
x1025 = x23 * x358
x1026 = Bp * x283
x1027 = B_y * x330
x1028 = x23 * x577
x1029 = x169 * x324
x1030 = x1019 * x21
x1031 = x23 * x353
x1032 = x127 * x371
x1033 = x1025 * x21
x1034 = Bp * x359
x1035 = x190 * x293
x1036 = x282 * x388
x1037 = 6 * G_x
x1038 = x386 * x432
x1039 = x292 * x421
x1040 = Bpp * x1003
x1041 = x1040 * x316
x1042 = Gpp * x297
x1043 = x169 * x866
x1044 = x1009 * x2
x1045 = x1044 * x78
x1046 = x324 * xi
x1047 = x23 * x475
x1048 = S0_ty * x76
x1049 = x1048 * x78
x1050 = x405 * x76
x1051 = x231 * x396
x1052 = x302 * x48
x1053 = x303 * x86
x1054 = x282 * x444
x1055 = 36 * x374
x1056 = x23 * x424
x1057 = x23 * x663
x1058 = x173 * x333
x1059 = x173 * x302
x1060 = x346 * x450
x1061 = S0_t * x208
x1062 = x1061 * x358
x1063 = x161 * x282
x1064 = B * x482
x1065 = x511 * x949
x1066 = x1003 * x147
x1067 = x1005 * x50
x1068 = x208 * x534
x1069 = x173 * x303
x1070 = x303 * x982
x1071 = x256 * x282
x1072 = x282 * x469
x1073 = x1056 * x21
x1074 = x1057 * x21
x1075 = x151 * x261
x1076 = x254 * x349
x1077 = x254 * x510
x1078 = x353 * x482
x1079 = -x169 - x992
x1080 = x374 * x716
x1081 = x293 * x48
x1082 = x334 * x547
x1083 = x292 * x320
x1084 = x330 * x523
x1085 = x109 * x48
x1086 = x297 * x966
x1087 = x417 * x442
x1088 = 6 * x72
x1089 = S0_ty * x29
x1090 = x282 * x570
x1091 = 8 * x320
x1092 = x137 * x283
x1093 = x164 * x282
x1094 = x330 * x991
x1095 = x290 * x338
x1096 = x282 * x601
x1097 = x293 * x596
x1098 = Gpp * x655
x1099 = x374 * x432
x1100 = x371 * x604
x1101 = x282 * x607
x1102 = x569 * x648
x1103 = x564 * x872
x1104 = x1040 * x576
x1105 = x359 * x949
x1106 = x547 * x819
x1107 = x137 * x297
x1108 = x423 * x890
x1109 = x320 * xi_y
x1110 = x1109 * x338
x1111 = x337 * x423
x1112 = x1111 * x133
x1113 = x373 * x555
x1114 = x164 * x47
x1115 = x276 * x416
x1116 = x324 * x632
x1117 = G_y * S0_t
x1118 = x294 * x63
x1119 = x231 * x568
x1120 = x1048 * x576
x1121 = x333 * x73
x1122 = x302 * x73
x1123 = x225 * xi_y
x1124 = x282 * x682
x1125 = x110 * x297
x1126 = G_y * x169
x1127 = x1051 * x315
x1128 = Gp * x42
x1129 = B * x510
x1130 = x213 * x780
x1131 = x596 * x873
x1132 = x655 * x954
x1133 = x169 * x385
x1134 = x178 * x877
x1135 = S * x415
x1136 = x501 * x568
x1137 = x1109 * x616
x1138 = x1003 * x50
x1139 = x1138 * x576
x1140 = x179 * x333
x1141 = Gp * x392
x1142 = x315 * x444
x1143 = x214 * x293
x1144 = x1143 * x702
x1145 = x596 * x882
x1146 = x178 * x883
x1147 = x299 * x349
x1148 = x663 * x712
x1149 = x333 * x786
x1150 = x487 * x796
x1151 = x292 * x548
x1152 = x419 * x596
x1153 = x21 * x371
x1154 = x1153 * x338
x1155 = x526 * x616
x1156 = x490 * x796
x1157 = x1128 * x353
x1158 = Bp * x1153
x1159 = x254 * x282
x1160 = Bp * x21
x1161 = x1134 * x21
x1162 = x254 * x297
x1163 = x262 * x282
x1164 = x1010 * x131
x1165 = x109 * x254
x1166 = S0_t * (4 * Gp - x362)
x1167 = x1016 * x42
x1168 = G_y * x198
x1169 = x398 * x76
x1170 = x24 * x663
x1171 = x1083 * x62
x1172 = x169 * x568
x1173 = x416 * x679
x1174 = x423 * x834
x1175 = x1174 * x335
x1176 = x320 * x632
x1177 = x165 * x862
x1178 = x58 * x766
x1179 = x58 * x764
x1180 = x1179 * x21
x1181 = x278 * x282
x1182 = x1181 * x21
x1183 = x398 * x505
x1184 = x344 * x596
x1185 = x282 * x886
x1186 = x297 * x444
x1187 = x208 * x657
x1188 = x783 * x892
x1189 = x198 * x510
x1190 = x297 * x48
x1191 = x280 * x660
x1192 = B * x1003
x1193 = 72 * x529
x1194 = x660 * x895
x1195 = x307 * x321
x1196 = x1172 * x213
x1197 = x1190 * x892
x1198 = x280 * x745
x1199 = Sp * x596
x1200 = x1097 * x702
x1201 = x298 * x349
x1202 = x280 * x556
x1203 = x280 * x666
x1204 = x280 * x667
x1205 = x556 * x895
x1206 = x666 * x895
x1207 = x667 * x895
x1208 = x557 * x944
x1209 = x21 * x81
x1210 = x668 * x719
x1211 = x353 * x390
x1212 = x530 * x543
x1213 = x353 * x888
x1214 = S0_t * x393
x1215 = x282 * x892
x1216 = x376 * x540
x1217 = x390 * x657
x1218 = x190 * x873
x1219 = x282 * x933
x1220 = x435 * x892
x1221 = x201 * x976
x1222 = x178 * x358
x1223 = x660 * x949
x1224 = x217 * x873
x1225 = x358 * x888
x1226 = Bp * x981
x1227 = x442 * x944
x1228 = x556 * x949
x1229 = x666 * x949
x1230 = x667 * x949
x1231 = x201 * x442
AA[1,1] = x10 * x11
AA[1,2] = 0
BB[1,1] = x10 * (x12 + x15 + x18 * x22 + 8)
BB[1,2] = -x13 * x9 * (-x23 + x25 - x28)
CC[1,1] = x2 * (-5 * Bp * x126 - Bp * x161 * x65 - Sp * x143 + x1 * x155 + x109 * (Bp * x36 - Bp * x55 * x57 + Bpp * x49 + S0 * x33 + S0 * x54 - S0 * x66 + S0 * x71 + S0 * x75 - 7 * x0 * x61 + x1 * x42 + x108 * (u * (-Bp * (S0 * (x100 + 6) + x13 * (x101 + x103 + x104)) + x17 * (S0 * (x106 + 4) + x13 * (x101 + x102 * x107)) + x95) + x93) - x14 * x47 - x16 * x44 + x31 * x4 + x31 + 2 * x32 - 8 * x34 + x38 - x39 * x61 * x81 + 21 * x41 - x45 * x46 - x46 * x58 + x48 * x80 - x48 * x83 + x53 + x59 * x60 + 16 * x6 - x62 * x64 + x67 * x69 + x7 * x92 + x73 * x74 + x73 * x85 + 2 * x77 + x78 * x79 + x84 * x85 + x86 * x87) + 27 * x110 * x132 + x111 * x39 + x117 * (x108 * x115 + x112 - x113 + x33 - x46 * x81 + x54 - x66 + x71 + x75 + 2 * x79 + x92 + 4) + x118 * x50 - 7 * x119 * x139 + x119 * x50 + x120 * x144 + x120 * x145 + x120 * x176 + x124 * (u * (-Bp * (S0 * (x100 + 5) + x13 * (x102 * (x98 + 11) + x121)) + x17 * (S0 * (x106 + 3) + x13 * (x121 + x123 * (x1 + 3))) + x95) + x93) - x125 * x140 * x81 - 11 * x125 * x51 + x127 * x128 + x129 * x84 + x13 * x134 + x131 * x149 + x131 * x43 - x132 * x61 * x62 + x135 * x80 - x136 * x160 * x52 - 16 * x136 * x37 - x138 * x14 - x141 * x142 - x142 * x162 + x146 * x6 + x147 * x40 + x148 * x54 + x150 * x59 + x151 * x153 + x151 * x154 + x151 * x183 + x157 * x158 - 18 * x159 * x61 - x167 - x168 - x171 - x172 + x174 + x175 + x177 * x38 + x177 * x53 + x180 + x182 - x186 - x189 - x192 - x194 - x195 - x196 + x197 + x200 + x203 + x204 + x207 + x210 - x212 - x216 + x218 + x219 + x237 + 2 * x30 * x4 + x30 - x36 * x58 + 42 * x41 * x48 - x44 * x48 * x81)
CC[1,2] = -x8 * (x239 - x245 - x246 - x247 + x248 + x251 + x252 + x253 - x255 - x257 - x258 - x260 - x263 + x264 + x265 - x267 - x268 + x269 + x271 + x273 + x281 + x3 * (x11 * (-Gp * (x243 + 7) + x89 * (x243 + 5)) + x238 + x242 + x244 * x27))
SS[1] = u * (2 * Gp_y * x29 + S0_y * x198 + S0_y * x311 + x146 * x323 + x238 * x302 - x238 * x303 + x274 * x302 + x29 * x310 - x293 * x322 + x297 * x30 * x330 - x301 - x305 + x306 + x308 + x309 - x312 - x314 - x319 - x326 - x327 * x329) + x0 * (24 * B * S0 * S0_tx * x2 * x320 + 24 * B * S0 * S0_x * x2 * x320 * xi + 24 * B * x2 * x29 * x320 * xi_x + 12 * B_x * S0 * x2 * x320 * x438 + 12 * Bp * S0 * S0_t * x27 * xi_y + 12 * Bp * S0 * S0_ty * x27 * xi + 2 * Bp * S0 * S0_y * x133 * x27 + 12 * Bp * S0_t * S0_ty * x27 + 16 * Bp * S0_t * S0_x * x2 * x320 * xi + 20 * Bp * S0_x * x116 * x2 * x315 * x320 + 12 * Bp * x27 * x29 * xi * xi_y + 2 * Bp_y * S0 * S0_t * x27 * xi + Bp_y * x116 * x27 + Bp_y * x133 * x27 * x29 + 4 * Bpp * S0 * S0_t * x2 * x320 * xi * xi_x + 2 * Bpp * S0 * S0_tx * x133 * x2 * x320 + 4 * Bpp * S0_t * S0_tx * x2 * x320 * xi + Bpp * S0_t * S0_y * x133 * x27 + 2 * Bpp * S0_tx * x116 * x2 * x315 * x320 + 2 * Bpp * S0_y * x116 * x27 * x315 * xi + Bpp * S0_y * x27 * x298 * x525 + 2 * Bpp * x116 * x2 * x320 * xi_x + 2 * Bpp * x133 * x2 * x29 * x320 * xi_x - Bpp * x558 + 24 * Gp * S0 * S0_t * xi_y + 24 * Gp * S0 * S0_ty * xi + 4 * Gp * S0 * S0_y * x133 + 24 * Gp * S0_t * S0_ty + 24 * Gp * x29 * xi * xi_y + 4 * Gp_y * S0 * S0_t * xi + 2 * Gp_y * x116 + 2 * Gp_y * x133 * x29 + 2 * Gpp * S0_t * S0_y * x133 + 4 * Gpp * S0_y * x116 * x315 * xi + 2 * Gpp * S0_y * x298 * x525 + 32 * S * S0 * x2 * xi_x + 32 * S * S0_tx * x2 + 8 * S0 * S_x * x2 * xi + 16 * S0_t * S0_x * Sp * x2 * x315 * xi + 8 * S0_t * S_x * x2 - S0_t * x532 + 16 * S0_x * Sp * x116 * x2 * x298 - x133 * x301 - x133 * x312 - x133 * x326 - x134 * x313 - 6 * x137 * x536 - x139 * x293 * x31 * x320 - x169 * x389 * x539 - x238 * x523 - x238 * x527 - x238 * x528 - x274 * x523 - x274 * x527 - x274 * x545 - x302 * x520 - x327 * x330 * x553 - x381 * xi - x387 * xi - x397 * x524 - x397 * x546 - x399 * x548 - x408 * xi - x416 * x542 - x48 * x519 - x48 * x532 - x48 * x538 - x516 - x518 - x521 - x522 - 8 * x530 - x533 * x543 - x533 * xi - x535 - x536 * x537 - x541 - x547 * x550 - x549 - x552 - x554 * x556) + x13 * (-Bpp * x443 + Gp_y * x230 + Gpp * x398 + S0_t * x379 + S0_t * x406 + S0_y * x411 - x109 * x412 + x148 * x310 - x169 * x405 - x177 * x407 + x211 * x384 + x223 * x416 - x224 * x419 - x230 * x391 - x235 * x380 + x274 * x413 + x274 * x420 - x282 * x395 + x282 * x428 + x282 * x434 + x293 * x427 - 8 * x293 * x431 + x297 * x317 + x297 * x437 + x303 * x390 + x303 * x414 - x304 * x316 - x305 * xi + x306 * xi + x309 * xi - x314 * x417 + x317 * x415 - x319 * xi - x359 * x436 - x375 + x377 - x378 - x381 - x383 - x387 + x388 * x389 - x392 + x394 - x395 * x399 + x400 - x402 + x404 - x408 - x409 * x410 + x422 - x425 - x428 * x435 + x429 * x430 + x432 * x433 - x438 * x440) + x300 * (S0 * (2 * B * x295 * (S0_ty + x294) * (B * x296 - x283 * x295) + x289 * x297) - S0_t * (x288 * x293 + x292 * (-x290 + x291)) + x282 * x289) + x35 * (-B_y * (x29 * (x23 + x27 * x674) + x675) + Gpp * x618 + S * x406 - S * x440 - S0_ty * x250 + S0_y * x497 + S_y * x198 + S_y * x311 - x133 * x375 + x133 * x377 - x133 * x402 + x133 * x404 + x133 * x422 + x133 * x423 * x663 - x133 * x425 + x156 * x432 * x648 - x164 * x635 + x173 * x359 - x198 * x606 - x220 * x297 - x220 * x415 + x224 * x510 - x236 * x297 * x661 + x236 * x510 - x236 * x534 + x250 * x615 + x274 * x643 - x276 * x294 + x282 * x621 - x294 * x601 + x297 * x513 - x304 * x576 + x306 * x632 + x307 * x393 - x308 * x664 - x322 * x393 + x322 * x659 - x325 * x665 - x332 * (x29 * x670 - x673) + x349 * x641 - x362 * x498 + x369 * x475 - x386 * x609 + x390 * x523 + x390 * x528 - x397 * x622 + x397 * x644 - x407 * x625 - x412 * x625 + x414 * x523 + x414 * x527 + x414 * x528 - x414 * x636 - x414 * x645 + x415 * x631 - x418 * x640 + x433 * x510 - x435 * x658 + x436 * x556 - x436 * x660 - x436 * x666 - x436 * x667 + x441 * x620 - 36 * x442 * x582 + x446 - x447 + x460 + x461 - x465 + x467 - x468 - x471 + x472 - x478 + x480 + x485 - x488 + x495 - x496 + x504 - x506 + x508 * x627 + x510 * x607 - x549 * xi - x555 * x612 + x557 * x668 - x594 * x602 - x594 * x611 - x595 + x597 + x598 - x599 - x600 + x603 * xi - x605 + x607 * x608 + x607 * x610 - x607 * x626 - x607 * x639 - x612 * x613 - x614 + x619 - x623 - x624 + x630 + x634 - x637 * x638 + x642 - x647 * xi + x648 * x657 + x648 * x662 + x650 - x652 + x654 + x656) + x372 * (B * x332 + B_y * x291 - x298 * (-G * x350 + S0_ty * x351 + x21 * x336 - x21 * x341 + x23 * x334 + x23 * x365 + x240 * x356 + x283 * x337 - x283 * x339 + x283 * x342 - x290 * x337 - x290 * x342 - x292 * x352 - x328 * x371 * (G + x164) - x336 + x340 * x362 + x341 + x343 * x344 + x344 * x363 - x345 * x346 - x345 * x364 + x348 - x349 * x366 - x349 * x368 - x353 * x354 + x355 + x357 * x358 + x358 * x369 + x359 * x368 + x361 + x367 * x368 + x370)) + x39 * (-B * x552 - B * x629 - B * x966 * xi_y - S0_t * x926 + x116 * x484 + x133 * x446 - x133 * x447 + x133 * x461 + x133 * x467 - x133 * x468 - x133 * x471 + x133 * x472 - x133 * x478 + x133 * x495 + x133 * x504 - x133 * x506 + x156 * x510 * x918 - x156 * x917 - x158 * x534 - x158 * x626 + x164 * x974 + x164 * x980 - x165 * x813 - x165 * x851 + x165 * x957 - x169 * x981 - x173 * x556 + x173 * x660 + x173 * x666 + x173 * x667 - x173 * x745 - x179 * x349 + x179 * x359 - x185 * x432 - x187 * x359 * x540 + x187 * x811 - x187 * x964 + x190 * x718 - x190 * x775 - x202 * x442 + x21 * x889 + x21 * x927 + x21 * x930 - x21 * x931 + x21 * x932 + x21 * x934 - x21 * x937 - x21 * x938 - x21 * x940 - x21 * x941 - x21 * x942 + x21 * x943 + x21 * x945 - x21 * x948 + x21 * x950 - x21 * x951 - x21 * x952 + x21 * x955 - x213 * x813 - x213 * x868 - x217 * x718 + x217 * x775 + x228 * x297 + x232 * x442 + x234 * x349 + x235 * x728 - x236 * x347 - x254 * x397 * x417 + x254 * x523 + x254 * x527 + x254 * x528 + x254 * x545 - x254 * x645 + x282 * x972 - x294 * x886 + x297 * x953 - x299 * x583 + x321 * x419 * x810 - x330 * x988 * (Bp * S0_t - x987) + x335 * x961 - x347 * x607 - x349 * x73 - x349 * x786 - x353 * x518 - x353 * x522 - x362 * x975 - x362 * x983 + x369 * x959 + x369 * x968 + x371 * x960 - x373 * x721 * x829 + x385 * x679 + x385 * x848 + x385 * x850 + x385 * x928 + x390 * x899 - x390 * x929 + x393 * x973 + x393 * x977 - 12 * x403 * x60 + x403 * x958 - x411 * x718 + x415 * x953 + x419 * x880 - x431 * x870 + x432 * x985 + x435 * x911 + x435 * x986 + x442 * x910 + x442 * x912 - x444 * x620 - x464 * x956 - x464 * x965 + x469 * x620 - x48 * x676 - x48 * x926 - x494 * x912 - x50 * x558 + x540 * x979 + x543 * x812 - x550 * x779 - x556 * x86 - x556 * x982 - 4 * x557 * x76 - 60 * x582 * x984 + x606 * x939 + x606 * x962 - x607 * x730 + x609 * x963 + x610 * x810 + x615 * x946 - x615 * x947 + x628 * x719 - x628 * x929 - x659 * x973 - x659 * x977 + x660 * x982 - x661 * x870 - x664 * x864 + x666 * x86 + x666 * x982 + x667 * x982 + x668 * x884 + x679 * x833 + x691 + x695 * xi - x701 * xi + x744 - x746 + x750 - x752 + x757 + x762 + x766 * x835 - x766 * x939 - x771 * x970 - x779 * x976 + x785 - x787 * x973 + x792 + x797 - x830 * xi + x831 * x967 + x833 * x848 + x833 * x850 - x840 * x848 - x840 * x928 - x842 * xi + x846 * xi + x853 * xi + x854 * xi - x857 * xi + x860 * xi - x863 * xi - x865 * xi + x875 * xi + x881 * xi - x887 - x889 + x905 - x906 + x910 * x915 - x912 * x978 - x927 - x930 + x931 - x932 - x934 + x937 + x938 + x940 + x941 + x942 - x943 - x945 + x948 - x950 + x951 + x952 - x955 - x958 * x969 - x991 * (x27 * x990 + x806 + x989)) + x43 * (-B * x421 * x659 - B_y * x261 * x879 - B_y * x78 * x806 - G * x809 + Gp * x294 * x810 + Gp_y * x616 + Gpp * x841 + S * x109 * x310 + S0_y * x362 * x529 + S0_y * x834 * x835 + S_y * x217 + S_y * x352 + x109 * x254 * x294 - x133 * x293 * x658 - x133 * x516 - x133 * x535 + x133 * x547 * x877 + x133 * x603 - x136 * x320 * x870 + x148 * x254 * xi_y - x164 * x856 + x165 * x694 + x166 * x349 - x166 * x359 - x169 * x249 * x442 - x169 * x293 * x835 - 14 * x169 * x831 + x170 * x349 - x170 * x359 + x187 * x821 + x199 * x432 - x201 * x409 + x202 * x359 + x21 * x814 - x21 * x816 + x21 * x817 - x21 * x820 - x21 * x822 - x21 * x823 + x21 * x824 + x21 * x826 + x21 * x827 - x21 * x828 + x21 * x839 - x217 * x606 + x217 * x766 + x229 * x783 + x230 * x297 * x505 + x230 * x732 + x230 * x736 - x233 * x523 - x233 * x527 - x233 * x528 + x235 * x874 + x24 * x409 + x249 * x813 + x249 * x868 - x250 * x385 - x250 * x833 + x250 * x840 - x254 * x413 - x254 * x420 - x272 * x303 - x274 * x739 - x274 * x748 - x274 * x759 + x274 * x768 - x276 * x385 - x276 * x544 - x276 * x833 + x276 * x840 + x294 * x679 + x294 * x848 + x294 * x850 - x307 * x608 - x308 * x321 * x721 + x310 * x852 + x320 * x331 * x78 * (x799 + x885) - x325 * x767 + x325 * x784 + x325 * x794 - x325 * x798 + x335 * x414 + x349 * x82 - x353 * x383 - x358 * x436 - x359 * x82 + x362 * x851 + x371 * x78 * (S0 * (x27 * (x16 - x357 * xi) - x563 + x88) - x109 * (Gp + x169)) - x381 * x632 - x386 * x825 - x391 * x616 - x393 * x427 - x393 * x871 + x394 * x582 + x397 * x858 - x400 * x664 + x403 * x843 - x407 * x741 + x432 * x788 + x433 * x742 - x435 * x855 - x435 * x878 - x438 * x439 * x576 - 4 * x442 * x76 - x443 * x50 - x47 * x714 + x519 * x555 - x523 * x540 - x527 * x540 - x528 * x540 + x538 * x555 + x538 * x613 + x547 * x883 - x556 * x779 - x560 * x766 + x586 * x727 - x594 * x633 + x594 * x769 - x595 * xi + x598 * xi - x599 * xi + x602 * x770 - x623 * xi - x624 * xi + 28 * x632 * x793 + x642 * xi + x648 * x876 - x648 * x884 * xi + x650 * xi - x652 * xi + x654 * xi + x656 * xi + x659 * x871 + x660 * x779 + x663 * x861 + x666 * x779 + x695 - x701 - x724 + x771 * x859 + x812 - x814 + x816 - x817 + x818 + x820 + x822 + x823 - x824 - x826 - x827 + x828 - x830 - x831 * x832 + x836 * x837 - x839 - x842 - x845 + x846 - x847 - x849 + x853 + x854 - x857 + x860 - x863 - x865 - x867 - x869 + x872 * x873 + x872 * x882 + x875 + x881) + x51 * (12 * B * Bp * S0_t * S0_x * x133 * x2 * x320 + 6 * B * Bp * S0_t * S0_y * x133 * x27 + 24 * B * Bp * S0_x * x116 * x2 * x315 * x320 * xi + 12 * B * Bp * S0_x * x2 * x298 * x320 * x525 + 12 * B * Bp * S0_y * x116 * x27 * x315 * xi + 6 * B * Bp * S0_y * x27 * x298 * x525 + 36 * B * G * S0 * S0_t * x2 * x27 * xi_x + 36 * B * G * S0 * S0_t * xi_y + 36 * B * G * S0 * S0_tx * x2 * x27 * xi + 36 * B * G * S0 * S0_ty * xi + 36 * B * G * S0_t * S0_tx * x2 * x27 + 36 * B * G * S0_t * S0_ty + 36 * B * G * S0_t * S0_y * x21 * xi + 36 * B * G * S0_y * x116 * x21 * x315 + 36 * B * G * x2 * x27 * x29 * xi * xi_x + 36 * B * G * x29 * xi * xi_y + 12 * B * G_x * S0 * S0_t * x2 * x27 * xi + 6 * B * G_x * x116 * x2 * x27 + 6 * B * G_x * x133 * x2 * x27 * x29 + 12 * B * Gp * S0 * S0_t * x21 * xi * xi_y + 6 * B * Gp * S0 * S0_ty * x133 * x21 + 12 * B * Gp * S0_t * S0_ty * x21 * xi + 6 * B * Gp * S0_t * S0_x * x133 * x2 * x27 + 6 * B * Gp * S0_t * S0_y * x133 + 6 * B * Gp * S0_ty * x116 * x21 * x315 + 12 * B * Gp * S0_x * x116 * x2 * x27 * x315 * xi + 6 * B * Gp * S0_x * x2 * x27 * x298 * x525 + 12 * B * Gp * S0_y * x116 * x315 * xi + 6 * B * Gp * S0_y * x298 * x525 + 6 * B * Gp * x116 * x21 * xi_y + 6 * B * Gp * x133 * x21 * x29 * xi_y + 72 * B * S * S0 * x2 * x320 * xi * xi_x + 72 * B * S * S0_t * S0_tx * x2 * x315 * x320 + 36 * B * S * S0_t * S0_y * x27 * x315 * xi + 72 * B * S * S0_t * x2 * x320 * xi_x + 72 * B * S * S0_tx * x2 * x320 * xi + 36 * B * S * S0_y * x116 * x27 * x298 - B * x630 - B * x634 + 2 * B_x * x2 * x320 * x924 + B_y * (S0 * (-x596 + x916 + x925) + x291 * x671 + x291 * x672) + 12 * Bp * G * S0 * S0_t * x21 * xi * xi_y + 6 * Bp * G * S0 * S0_ty * x133 * x21 + 12 * Bp * G * S0_t * S0_ty * x21 * xi + 6 * Bp * G * S0_t * S0_x * x133 * x2 * x27 + 6 * Bp * G * S0_t * S0_y * x133 + 6 * Bp * G * S0_ty * x116 * x21 * x315 + 12 * Bp * G * S0_x * x116 * x2 * x27 * x315 * xi + 6 * Bp * G * S0_x * x2 * x27 * x298 * x525 + 12 * Bp * G * S0_y * x116 * x315 * xi + 6 * Bp * G * S0_y * x298 * x525 + 6 * Bp * G * x116 * x21 * xi_y + 6 * Bp * G * x133 * x21 * x29 * xi_y + 4 * Bp * G_y * S * S0 * x21 + 4 * Bp * Gp * S * S0 * x2 * x27 * xi_x + 4 * Bp * Gp * S * S0 * xi_y + 4 * Bp * Gp * S * S0_t * S0_y * x21 * x315 + 4 * Bp * Gp * S * S0_tx * x2 * x27 + 4 * Bp * Gp * S * S0_ty + 2 * Bp * S * S0_t * S0_y * Sp * x27 * x298 + 4 * Bp * S * S0_tx * Sp * x2 * x315 * x320 + 2 * Bp * S * S_y * x27 + 4 * Bp * S * Sp * x2 * x320 * xi_x - Bp_x * x330 * x907 + Bp_y * x110 * x27 + Bpp * S0_t * S0_y * x110 * x27 * x298 + 2 * Bpp * S0_tx * x110 * x2 * x315 * x320 + 2 * Bpp * x110 * x2 * x320 * xi_x + 12 * G * G_x * S0 * S0_t * x2 * xi + 6 * G * G_x * x116 * x2 + 6 * G * G_x * x133 * x2 * x29 + 12 * G * Gp * S0_t * S0_x * x133 * x2 + 24 * G * Gp * S0_x * x116 * x2 * x315 * xi + 12 * G * Gp * S0_x * x2 * x298 * x525 + 72 * G * S * S0_t * S0_y * x315 * xi + 72 * G * S * S0_y * x116 * x298 + 4 * Gp * S * S0_t * S0_y * Sp * x298 + 4 * Gp * S * S_y + 2 * Gp_y * x110 + 2 * Gpp * S0_t * S0_y * x110 * x298 + 4 * S * S0 * x2 * x320 * x50 * xi_x + 4 * S * S0 * x2 * x76 * xi_x + 2 * S * S0 * x27 * x50 * xi_y + 4 * S * S0_tx * x2 * x320 * x50 + 4 * S * S0_tx * x2 * x76 + 2 * S * S0_ty * x27 * x50 + 36 * S0 * S0_t * x2 * x320 * x67 * xi_x + 36 * S0 * S0_t * x2 * x72 * xi_x + 18 * S0 * S0_t * x27 * x67 * xi_y + 36 * S0 * S0_tx * x2 * x320 * x67 * xi + 36 * S0 * S0_tx * x2 * x72 * xi + 18 * S0 * S0_ty * x27 * x67 * xi + 36 * S0_t * S0_tx * x2 * x320 * x67 + 36 * S0_t * S0_tx * x2 * x72 + 18 * S0_t * S0_ty * x27 * x67 - x111 * x313 - x111 * x324 * x922 - x133 * x814 - x133 * x817 - x133 * x845 - x133 * x847 - x133 * x849 - x133 * x867 - x133 * x869 - x164 * x795 - x166 * x660 - x166 * x666 - x166 * x667 - x169 * x297 * x913 - x170 * x660 - x170 * x666 - x170 * x667 - x198 * x21 * x689 - x198 * x731 + 36 * x2 * x29 * x320 * x67 * xi * xi_x + 36 * x2 * x29 * x72 * xi * xi_x - x206 * x48 * x609 - x208 * x719 - x208 * x899 - x21 * x455 * x60 - x21 * x555 * x903 - x21 * x564 * x596 - x21 * x613 * x903 - x21 * x645 * x895 - x21 * x719 * x888 - x231 * x442 - x234 * x494 - x238 * x680 - x24 * x890 - x254 * x643 + 18 * x27 * x29 * x67 * xi * xi_y - x272 * x523 - x272 * x527 - x272 * x528 - x276 * x609 - x276 * x904 - x280 * x523 - x280 * x528 - x293 * x760 - x308 * x919 - x335 * x459 - x349 * x483 - x349 * x509 - x353 * x600 - x353 * x605 - x353 * x614 - x358 * x920 - x385 * x886 - x385 * x896 - x390 * x891 - x393 * x651 - x397 * x473 - x416 * x791 - x442 * x501 - x444 * x639 * x918 - x48 * x63 * x900 - x489 * x901 - x494 * x908 - x501 * x915 - x505 * x665 - x526 * x893 - x526 * x902 - x527 * x895 - x528 * x895 - x534 * x897 - x544 * x886 - x544 * x892 - x569 * x888 - 72 * x582 * x921 - x596 * x606 - x596 * x747 - x597 * x702 - x60 * x917 - x611 * x743 - x660 * x82 - x660 * x914 - x666 * x82 - x666 * x914 - x667 * x82 - x731 * x773 - x735 - x766 * x916 - x781 * x912 - x783 * x911 - x81 * x894 - x833 * x886 - x833 * x896 - x887 * xi - x889 * xi - x906 * xi - x909 * x910) + x515 * (S * x446 - S * x447 + S * x460 + S * x461 - S * x465 + S * x467 - S * x468 - S * x471 + S * x472 - S * x478 + S * x480 + S * x485 - S * x488 + S * x495 - S * x496 + S * x504 - S * x506 + S0_t * x209 * x359 + S0_ty * x137 * x473 + x130 * x432 * x500 + x151 * x313 * x456 * xi + x161 * x455 + x173 * x511 + x206 * x374 * x494 - x209 * x418 - x209 * x499 + x209 * x507 + x21 * x449 + x21 * x452 - x21 * x454 - x231 * x418 - 18 * x266 * x487 + x282 * x481 - x29 * x492 * x493 - x293 * x479 + x333 * x445 - x333 * x470 - x353 * x457 * x459 + x359 * x462 + x367 * x462 + x367 * x502 - x396 * x473 - x418 * x501 - x430 * x503 - x449 - x452 + x454 - x455 * x486 + x458 * x459 + x473 * x474 + x475 * x477 + x482 * x483 + x482 * x509 + x482 * x512 + x489 * x491 - x497 * x498 - x499 * x501 + x501 * x507 + x510 * x513) + x55 * (-S * x676 - S0_t * x701 * x706 - x110 * x382 + x116 * x313 * x84 + x133 * x691 + x133 * x744 - x133 * x746 + x133 * x750 - x133 * x752 + x133 * x757 + x133 * x762 + x133 * x785 + x133 * x792 + x133 * x797 + x151 * x313 * x450 + x164 * x763 - x164 * x765 - x169 * x371 * x616 + x169 * x62 * x698 + x169 * x782 - x179 * x556 + x179 * x660 + x179 * x666 + x179 * x667 - x179 * x745 - x185 * x510 - x205 * x297 * x772 + x205 * x715 + x208 * x569 * xi + x209 * x781 + x21 * x678 + x21 * x683 - x21 * x685 - x21 * x686 - x21 * x690 + x21 * x693 - x21 * x699 - x21 * x703 - x21 * x705 + x21 * x707 - x21 * x709 + x21 * x713 + x21 * x720 + x21 * x723 - x214 * x766 + x215 * x416 - x217 * x731 + x229 * x742 + x254 * x739 + x254 * x748 + x254 * x759 - x254 * x768 + x282 * x462 * xi + x293 * x607 * x63 * x632 + x294 * x353 * x697 - x294 * x681 + x297 * x479 - x297 * x778 + x298 * x696 * x793 + x315 * x376 * x696 + x320 * x392 * x444 * x706 + x330 * x803 * (x799 + x802) - x353 * x724 + x353 * x725 - x371 * x774 - x376 * x677 + x392 * x789 + x393 * x761 - x403 * x677 + x415 * x754 - x415 * x778 - x419 * x791 - x435 * x760 - x442 * x483 + x466 * x576 * xi + x473 * x568 * xi - x473 * x769 - x493 * (x27 * x808 + x805 + 2 * x806) + x494 * x509 - x501 * x557 + x501 * x781 + x502 * x783 + x505 * x655 * xi - x505 * x767 + x505 * x784 + x505 * x794 - x505 * x798 - x508 * x795 + x523 * x687 - x523 * x738 + x524 * x680 - x524 * x710 + x526 * x753 + x527 * x687 - x527 * x738 + x527 * x749 + x546 * x680 - x546 * x710 - x556 * x73 - x556 * x786 - x56 * x714 + x576 * x728 - x589 * x717 - x596 * x718 + x596 * x775 + x606 * x726 + x609 * x679 + x616 * x732 - x63 * x717 + x632 * x663 * x779 + x632 * x695 + x633 * x688 - x633 * x743 - x645 * x749 + x655 * x776 - x659 * x761 + x660 * x73 + x660 * x786 - x665 * x776 + x666 * x73 + x666 * x786 - x677 * x733 - x678 - x683 + x685 + x686 + x690 - x693 + x699 + x703 + x705 - x707 + x709 - x713 - x720 - x723 + x726 * x747 - x729 * x730 - x73 * x745 - x735 * xi + x736 * x737 + x740 * x741 + x742 * x788 - x745 * x786 - x755 * x756 - x76 * x767 - x761 * x787 - x770 * x771 - x779 * x780 + x790 * x791) + x593 * (2 * B * B_x * x2 * x29 * x320 * x438 + 4 * B * Bp * S0 * S0_t * S0_x * x2 * x320 * xi + 2 * B * Bp * S0 * S0_t * S0_y * x27 * xi + 4 * B * Bp * S0_x * x116 * x2 * x320 + 2 * B * Bp * S0_y * x116 * x27 + 6 * B * G * S0 * S0_t * S0_y * x21 + 6 * B * G * S0_tx * x2 * x27 * x29 + 6 * B * G * S0_ty * x29 + 6 * B * G * x2 * x27 * x456 * xi_x + 6 * B * G * x456 * xi_y + 2 * B * G_x * S0_t * x2 * x27 * x29 + 2 * B * G_x * x2 * x27 * x456 * xi + 2 * B * Gp * S0 * S0_t * S0_ty * x21 + 2 * B * Gp * S0 * S0_t * S0_x * x2 * x27 * xi + 2 * B * Gp * S0 * S0_t * S0_y * xi + 2 * B * Gp * S0_t * x21 * x29 * xi_y + 2 * B * Gp * S0_ty * x21 * x29 * xi + 2 * B * Gp * S0_x * x116 * x2 * x27 + 2 * B * Gp * S0_y * x116 + 2 * B * Gp * x21 * x456 * xi * xi_y + 8 * B * S * S0 * S0_tx * x2 * x320 + 4 * B * S * S0_t * S0_y * x27 + 8 * B * S * x2 * x29 * x320 * xi_x + B_y * x29 * x291 * x438 + 2 * Bp * G * S0 * S0_t * S0_ty * x21 + 2 * Bp * G * S0 * S0_t * S0_x * x2 * x27 * xi + 2 * Bp * G * S0 * S0_t * S0_y * xi + 2 * Bp * G * S0_t * x21 * x29 * xi_y + 2 * Bp * G * S0_ty * x21 * x29 * xi + 2 * Bp * G * S0_x * x116 * x2 * x27 + 2 * Bp * G * S0_y * x116 + 2 * Bp * G * x21 * x456 * xi * xi_y - Bp * x457 * x565 + 2 * G * G_x * S0_t * x2 * x29 + 2 * G * G_x * x2 * x456 * xi + 4 * G * Gp * S0 * S0_t * S0_x * x2 * xi + 4 * G * Gp * S0_x * x116 * x2 + 8 * G * S * S0_t * S0_y - S * x582 * x583 - S0_t * x348 - S0_t * x361 - S0_t * x370 + 6 * S0_tx * x2 * x29 * x320 * x67 + 6 * S0_tx * x2 * x29 * x72 - S0_ty * x21 * x570 + 3 * S0_ty * x27 * x29 * x67 - x137 * x283 * x564 - x164 * x584 - x169 * x588 + 6 * x2 * x320 * x456 * x67 * xi_x + 6 * x2 * x456 * x72 * xi_x - x21 * x23 * x448 - x21 * x23 * x451 - x23 * x279 * x494 - x23 * x453 - x23 * x562 - x230 * x282 * x589 + 3 * x27 * x456 * x67 * xi_y - x282 * x29 * x580 - x282 * x582 * x586 - x290 * x579 - x303 * x559 - x303 * x561 - x311 * x569 - x320 * x567 * x67 - x333 * x559 - x333 * x561 - x335 * x560 - x340 * x352 - x353 * x571 - x354 * x444 - x355 * x48 - x356 * x572 - x358 * x427 - x359 * x585 - x362 * x562 - x362 * x581 - x366 * x507 - x367 * x585 - x368 * x507 - x458 * x563 - x482 * x580 - x482 * x587 - x487 * x578 - x534 * x566 - x567 * x72 - x573 * x575 - x576 * x577 - x590 * x591)
AA[2,1] = 0
AA[2,2] = x11 * x9
BB[2,1] = x10 * x13 * (-x25 - x28 - x992)
BB[2,2] = x9 * (x22 * x26 + x243 + 8)
CC[2,1] = x2 * x8 * (-x239 + x245 + x246 + x247 - x248 - x251 - x252 - x253 + x255 + x257 + x258 + x260 + x263 - x264 - x265 + x267 + x268 - x269 - x271 - x273 + x281 - x3 * (x11 * (Gp * (-x107 - x15) + x89 * (x114 + x15)) - x115 * x27 + x238 - x242))
CC[2,2] = 2 * x117 * (-x24 * x993 - x244 * x997 + x79 - x91 + x994 + 2) + x167 + x168 + x171 + x172 - x174 - x175 - x180 - x182 + x186 + x189 + x192 + x194 + x195 + x196 - x197 - x200 - x203 - x204 - x207 - x210 + x212 + x216 - x218 - x219 + x237 + x316 * (S0 * x79 + S0 * x994 - x211 * x24 * x39 + x32 - 4 * x34 + x4 * x78 - x56 * x64 - x560 * x993 + 8 * x6 + x69 * x72 - x7 * x91 + 9 * x72 * x85 + x76 * x87 + x77 + x78 + x997 * (u * (-Bp * (S0 * (-x995 - 6) + x13 * (Sp - x103 + x104)) + x17 * (S0 * (-x996 - 4) + x13 * (Sp + x102 * (x12 - 7))) + x95) - x93)) + x320 * x7 * (2 * u * (S0 * x17 * (-x996 - 3) + x12 * (x120 + x123 * (x1 - 3)) + x136 * (x995 + 5) + x14 * (x102 * (11 - x98) + x121) + x95) - 2 * x93)
SS[2] = u * (Bpp * x1005 - S0_y * x318 + S0_y * x322 + x1000 - x1001 + x1002 * x328 - x1004 + x1006 * x328 - x1007 * x30 - x1008 - x1009 * x463 + x1010 * x30 + x198 * x293 + x221 * xi_y + x238 * x349 - x238 * x359 - x274 * x349 + x275 * x282 - x998 + x999) + x0 * (12 * B * S0 * S0_tx * x2 * x27 + 12 * B * S0 * S0_x * x2 * x27 * xi + 12 * B * x2 * x27 * x29 * xi_x + 6 * B_x * S0 * S0_t * x2 * x27 + 6 * B_x * x2 * x27 * x29 * xi + 24 * Bp * S0 * S0_t * x320 * xi_y + 24 * Bp * S0 * S0_ty * x320 * xi + 4 * Bp * S0 * S0_y * x133 * x320 + 24 * Bp * S0_t * S0_ty * x320 + 8 * Bp * S0_t * S0_x * x2 * x27 * xi + 10 * Bp * S0_x * x116 * x2 * x27 * x315 + 24 * Bp * x29 * x320 * xi * xi_y + 2 * Bp_y * x320 * x553 + 2 * Bpp * S0 * S0_t * x2 * x27 * xi * xi_x + Bpp * S0 * S0_tx * x133 * x2 * x27 + 2 * Bpp * S0_t * S0_tx * x2 * x27 * xi + 2 * Bpp * S0_t * S0_y * x133 * x320 + Bpp * S0_tx * x116 * x2 * x27 * x315 + 4 * Bpp * S0_y * x116 * x315 * x320 * xi + 2 * Bpp * S0_y * x298 * x320 * x525 - Bpp * x1084 + Bpp * x116 * x2 * x27 * xi_x + Bpp * x133 * x2 * x27 * x29 * xi_x + 24 * Gp * S0 * S0_t * x2 * xi_x + 24 * Gp * S0 * S0_tx * x2 * xi + 4 * Gp * S0 * S0_x * x133 * x2 + 24 * Gp * S0_t * S0_tx * x2 + 24 * Gp * x2 * x29 * xi * xi_x + 4 * Gp_x * S0 * S0_t * x2 * xi + 2 * Gp_x * x116 * x2 + 2 * Gp_x * x133 * x2 * x29 + 2 * Gpp * S0_t * S0_x * x133 * x2 + 4 * Gpp * S0_x * x116 * x2 * x315 * xi + 2 * Gpp * S0_x * x2 * x298 * x525 + 32 * S * S0 * xi_y + 32 * S * S0_ty + 8 * S0 * S_y * xi + 16 * S0_t * S0_y * Sp * x315 * xi + 8 * S0_t * S_y + 16 * S0_y * Sp * x116 * x298 - x1001 * x133 - x1004 * x133 - x1007 * x134 - x1008 * x133 - x1009 * x956 - x1009 * x965 - x1036 * xi - x1038 * xi - x1041 * xi - x1044 * x1085 - x1080 - x1081 * x233 - x1082 - x1083 * x236 - x1086 - x1087 * x274 - x238 * x660 - x238 * x666 - x238 * x667 - x274 * x556 - x274 * x745 - 20 * x321 * x397 - x340 * x547 - x349 * x520 - x384 * x529 - x385 * x434 - x385 * x531 - 16 * x389 * x661 - x42 * x775 - x421 * x991 - x442 * x524 - x494 * x628 - x527 * x554 - x531 * x544 - x531 * x833 - x542 * x615 - x628 * x978 - 16 * x957 - x964 - x974 - x980) + x13 * (6 * B * S0 * S0_x * x2 * x27 + 3 * B_x * x2 * x27 * x29 + 12 * Bp * S0 * S0_ty * x320 + 8 * Bp * S0 * S0_y * x320 * xi + 2 * Bp * S0_t * S0_x * x2 * x27 + 12 * Bp * x29 * x320 * xi_y + 4 * Bp_y * S0 * x320 * x438 + 2 * Bpp * S0 * S0_t * x2 * x27 * xi_x + 2 * Bpp * S0 * S0_tx * x2 * x27 * xi + 2 * Bpp * S0_t * S0_tx * x2 * x27 + 4 * Bpp * S0_t * S0_y * x320 * xi + 4 * Bpp * S0_y * x116 * x315 * x320 + 2 * Bpp * x2 * x27 * x29 * xi * xi_x + 12 * Gp * S0 * S0_tx * x2 + 8 * Gp * S0 * S0_x * x2 * xi + 12 * Gp * x2 * x29 * xi_x + 4 * Gp_x * S0 * S0_t * x2 + 4 * Gp_x * x2 * x29 * xi + 4 * Gpp * S0_t * S0_x * x2 * xi + 4 * Gpp * S0_x * x116 * x2 * x315 + 12 * S0 * S_y + 4 * S0 * Spp * xi * xi_y + 4 * S0_t * S0_ty * Spp * x315 + 24 * S0_t * S0_y * Sp * x315 + 4 * S0_t * Spp * xi_y - S0_t * x1045 + 4 * S0_ty * Spp * xi - S0_ty * x395 + 4 * S0_y * Sp * xi - Sp_y * x316 - x1035 - x1036 - x1037 * x463 - x1038 - x1039 - x1040 * x235 - x1041 - x1042 * x230 - x1043 - x1044 * x148 - x1046 * x274 - x224 * x840 - x293 * x411 - x294 * x395 - x318 * x389 - x339 * x426 - x350 - x359 * x414 - x385 * x433 - x386 * x783 - x409 * x429 - x437 * xi_y - x442 * x859 - x700 - x998 * xi) + x300 * (x1011 * x283 - x1011 * x290 + x1012 - x259 * x349 - x283 * x358 + x284 * x302 - x284 * x303 - x285 * x302 + x285 * x303 - x286 * x302 + x286 * x303 + x290 * x358 + x333 * (-x284 + x287) - x487 + x490 + x877 * (x1013 + x290)) + x35 * (-B * x611 * x648 + Gp * x133 * x844 + S * x1002 * x31 + S * x1006 * x31 - S * x1045 + S0_ty * x621 + S_y * x307 + S_y * x322 - Sp_y * x576 + x1000 * x664 - 48 * x1003 * x60 - x1027 * (x29 * x674 + x673) - x1035 * x133 - x1037 * x956 - x1037 * x965 - x1039 * x133 - x1043 * x133 - x1047 + x1049 - x1050 + x1053 - x1056 + x1057 - x1058 + x1059 + x1066 - x1067 - x1069 + x1070 + x1071 + x1073 - x1074 - x1076 + 36 * x1083 * x441 + x1083 * x607 * xi + x1093 * x236 - x1096 + x1097 - x1098 - 48 * x1099 - x1100 + x1101 * x164 + x1101 * x187 - x1102 - x1103 - x1104 + x1105 * x21 - x1105 + x1106 * xi - x1107 * x594 + x1108 + x1110 * x236 + x1112 - x1113 * x321 + x1114 * x133 * x293 - x1115 - x1116 * x274 - x133 * x320 * x935 + x164 * x551 + x198 * x393 - x198 * x659 + x211 * x900 - x220 * x526 - x220 * xi_y + x224 * x609 + x233 * x915 + x236 * x609 - x250 * x282 + x250 * x416 + x254 * x359 + x274 * x282 * x625 + x274 * x510 * x78 + x276 * x282 + x276 * x399 + x279 * x900 - x293 * x497 - x294 * x649 + x302 * x641 - x311 * x393 + x321 * x821 - x322 * x606 + x325 * x618 + x331 * (x29 * (x23 - x27 * x670) + x675) + x362 * x475 - x369 * x498 - x386 * x510 - x390 * x556 + x390 * x660 + x390 * x666 + x390 * x667 - x390 * x745 - x396 * x640 + x414 * x556 - x414 * x660 - x414 * x666 - x414 * x667 + x414 * x745 - x433 * x609 + x436 * x527 + x436 * x528 - x442 * x622 - x442 * x644 + x526 * x631 - x540 * x915 + x557 * x628 - x594 * x978 + x607 * x609 - x615 * x621 - x617 * x637 - x628 * x781 - x628 * x909 + x632 * x999 + x638 * x836 - x668 * x769 + x795) + x372 * (x1014 + x298 * (B * x1029 + G * x378 + x1015 * x21 + x1015 - x1016 * x31 + x1017 - x1018 + x1019 - x1020 * x349 + x1021 - x1022 - x1023 - x1024 * x328 + x1025 + x1026 * x359 + x1027 * x127 + x1028 - x1030 + x1031 * x349 + x1032 * x240 - x1033 - x1034 * x290 - x282 * x351 + x283 * x424 - x290 * x424 + x290 * x663 - x293 * x561 + x303 * x368 + x333 * x368 - x340 * x357 - x340 * x369 - x343 * x564 - x358 * x362 - x363 * x564)) + x39 * (-B * x1086 - B * x1106 - B * x321 * x635 + Bp * x1231 + G * x518 + G_y * x960 + Gp * x543 * x864 + S0_t * x1216 - S0_t * x510 * x970 - S0_y * x299 * x539 - S_y * x977 - x1016 * x236 - x1016 * x607 + x1048 * x316 * xi + x1049 * x133 - x1050 * x133 + x1054 * x390 - x1054 * x628 - x1056 * x133 + x1057 * x133 - x1058 * x133 + x1066 * x133 - x1067 * x133 + x1071 * x133 - x1072 * x390 + x1073 * x133 - x1074 * x133 + x1084 * x50 + x1085 * x1162 - x1087 * x254 - x1094 * (x338 + x990) + x1109 * x61 * x810 + x1110 * x810 - x1117 * x217 + x1117 * x411 - x1118 * x607 + x1121 - x1122 + x1123 + x1128 * x1186 - x1133 * x217 - x1134 + x1138 * x316 * xi - x1140 + x1149 - x1150 + x1151 * xi - x1154 * x235 + x1156 - x1157 * x432 - x1160 * x1231 + x1161 + x1163 + x1164 + x1165 * x783 - x1169 * xi - x1171 * xi - x1173 * xi + x1174 * x569 - x1175 * xi + 60 * x1176 * x335 - x1177 * xi - x1183 * xi - x1185 - x1186 * x772 + x1190 * x679 - x1190 * x848 - 24 * x1192 * x61 - x1192 * x971 + x1196 + x1210 + x1211 * x442 + x1212 * x970 + x1213 * x349 + x1214 * x165 - x1214 * x213 - x1215 * x21 + x1215 + x1216 * x48 - x1217 * x21 + x1217 - x1218 * x21 + x1218 - x1219 * x21 + x1219 + x1220 * x21 - x1220 + x1221 * x21 - x1221 + x1222 * x21 - x1222 + x1223 * x21 - x1223 + x1224 * x21 - x1224 - x1225 * x21 + x1225 - x1226 * x21 + x1226 + x1227 * x21 - x1227 - x1228 * x21 + x1228 + x1229 * x21 - x1229 + x1230 * x21 - x1230 + x158 * x279 * x297 - x160 * x979 - x164 * x441 * x612 - x164 * x518 - x164 * x522 - x169 * x627 * x936 - x173 * x523 - x173 * x527 - x173 * x528 + x173 * x636 + x173 * x645 + x179 * x302 - x179 * x303 - x187 * x521 + x187 * x541 + x187 * x603 + x187 * x864 - x188 * x627 - x193 * x646 + x211 * x870 - x213 * x530 + x228 * xi_y + x229 * x385 * xi - x23 * x959 - x23 * x968 + x232 * x397 - x254 * x556 + x254 * x660 + x254 * x666 + x254 * x667 - x254 * x745 + x282 * x679 * xi + x282 * x896 + x293 * x508 * x56 - x294 * x911 - x294 * x972 + x321 * x811 * xi + x349 * x574 * x628 + x349 * x687 - x349 * x738 - x349 * x749 + x353 * x974 + x353 * x980 + x362 * x959 + x362 * x968 - x369 * x975 - x369 * x983 - x371 * x48 * x62 + x385 * x880 + x385 * x985 - x389 * x986 - x390 * x884 - x393 * x939 + x393 * x962 + x398 * x776 - x399 * x886 - x403 * x835 + x403 * x939 + x416 * x848 * xi + x416 * x946 - x416 * x947 - x419 * x679 + x419 * x848 - x419 * x928 - x423 * x448 * x706 + x432 * x679 - x432 * x848 + x432 * x928 - x510 * x963 + x523 * x86 + x526 * x953 + x527 * x86 + x527 * x982 + x528 * x982 - x579 * x810 * x922 + x606 * x977 + x611 * x910 - x62 * x718 - x628 * x657 + x628 * x884 - x645 * x86 - x645 * x982 + x664 * x811 + x679 * x790 - x766 * x958 - x790 * x848 - x790 * x850 - x813 * x861 + x861 * x957 + x898 * x910 + x898 * x912 + x921 * x970 + x953 * xi_y - x967 * x984 + x988 * (S0_t * x1079 + x27 * x987 + x989)) + x43 * (6 * B * Bp * S0_t * S0_x * x2 * x27 + 12 * B * Bp * S0_t * S0_y * x320 + 6 * B * G_x * x2 * x21 * x29 + 6 * B * Gp * S0 * S0_tx * x2 + 6 * B * Gp * S0 * S0_ty * x27 + 6 * B * Gp * S0_t * S0_x * x2 * x21 + 6 * B * Gp * x2 * x29 * xi_x + 6 * B * Gp * x27 * x29 * xi_y + 6 * B * S * S0_x * x2 * x27 + 24 * B * S0 * S0_t * x2 * x27 * xi * xi_x + 12 * B * S0 * S0_tx * x133 * x2 * x27 + 6 * B * S0 * S_x * x2 * x27 + 12 * B * S0 * Sp * x320 * xi_y + 24 * B * S0_t * S0_tx * x2 * x27 * xi + 6 * B * S0_t * S0_x * Sp * x2 * x27 * x315 + 24 * B * S0_t * S0_y * x133 * x320 + 12 * B * S0_tx * x116 * x2 * x27 * x315 + 12 * B * S0_ty * Sp * x320 + 48 * B * S0_y * x116 * x315 * x320 * xi + 24 * B * S0_y * x298 * x320 * x525 - B * x1111 + 12 * B * x116 * x2 * x27 * xi_x + 12 * B * x133 * x2 * x27 * x29 * xi_x + B_x * S0 * x2 * (x1166 + x217 + x27 * x885 - x560) + 2 * B_y * S0 * x320 * (-x345 - x879) + 6 * Bp * G * S0 * S0_tx * x2 + 6 * Bp * G * S0 * S0_ty * x27 + 6 * Bp * G * S0_t * S0_x * x2 * x21 + 6 * Bp * G * x2 * x29 * xi_x + 6 * Bp * G * x27 * x29 * xi_y + 4 * Bp * G_y * S0 * S0_t * x27 + 4 * Bp * G_y * x27 * x29 * xi + 4 * Bp * Gp * S0 * S0_t * x2 * x21 * xi_x + 4 * Bp * Gp * S0 * S0_tx * x2 * x21 * xi + 4 * Bp * Gp * S0_t * S0_tx * x2 * x21 + 4 * Bp * Gp * S0_t * S0_x * x2 * xi + 4 * Bp * Gp * S0_t * S0_y * x27 * xi + 4 * Bp * Gp * S0_x * x116 * x2 * x315 + 4 * Bp * Gp * S0_y * x116 * x27 * x315 + 4 * Bp * Gp * x2 * x21 * x29 * xi * xi_x + 32 * Bp * S * S0 * x320 * xi_y + 14 * Bp * S * S0_t * S0_x * x2 * x27 * x315 + 32 * Bp * S * S0_ty * x320 + 4 * Bp * S * S0_y * x320 * xi + 4 * Bp * S0 * S_y * x320 * xi + 2 * Bp * S0 * Sp * x2 * x27 * xi * xi_x + 2 * Bp * S0_t * S0_tx * Sp * x2 * x27 * x315 + 4 * Bp * S0_t * S0_y * Sp * x315 * x320 * xi + 4 * Bp * S0_t * S_y * x320 + 2 * Bp * S0_t * Sp * x2 * x27 * xi_x + 2 * Bp * S0_tx * Sp * x2 * x27 * xi + 4 * Bp * S0_y * Sp * x116 * x298 * x320 + 4 * Bp_y * S * x320 * x438 + 2 * Bpp * S * S0 * x2 * x27 * xi * xi_x + 2 * Bpp * S * S0_t * S0_tx * x2 * x27 * x315 + 4 * Bpp * S * S0_t * S0_y * x315 * x320 * xi + 2 * Bpp * S * S0_t * x2 * x27 * xi_x + 2 * Bpp * S * S0_tx * x2 * x27 * xi + 4 * Bpp * S * S0_y * x116 * x298 * x320 - Bpp * x1109 * x737 - Bpp * x1137 + 6 * G * G_y * x29 + 12 * G * Gp * S0_t * S0_y + 12 * G * S0 * Sp * x2 * xi_x + 24 * G * S0_t * S0_x * x133 * x2 + 12 * G * S0_tx * Sp * x2 + 48 * G * S0_x * x116 * x2 * x315 * xi + 24 * G * S0_x * x2 * x298 * x525 - G * x394 + 32 * Gp * S * S0 * x2 * xi_x + 32 * Gp * S * S0_tx * x2 + 4 * Gp * S * S0_x * x2 * xi + 4 * Gp * S0 * S_x * x2 * xi + 4 * Gp * S0_t * S0_x * Sp * x2 * x315 * xi + 4 * Gp * S0_t * S_x * x2 + 4 * Gp * S0_x * Sp * x116 * x2 * x298 + 4 * Gp_x * S * S0 * x2 * xi + 4 * Gp_x * S * S0_t * x2 + 4 * Gpp * S * S0_t * S0_x * x2 * x315 * xi + 4 * Gpp * S * S0_x * x116 * x2 * x298 - Gpp * x794 + 2 * S0 * S0_t * x2 * x27 * x50 * xi_x + 4 * S0 * S0_t * x320 * x50 * xi_y + 4 * S0 * S0_t * x76 * xi_y + 2 * S0 * S0_tx * x2 * x27 * x50 * xi + 4 * S0 * S0_ty * x320 * x50 * xi + 4 * S0 * S0_ty * x76 * xi + 2 * S0_t * S0_tx * x2 * x27 * x50 + 4 * S0_t * S0_ty * x320 * x50 + 4 * S0_t * S0_ty * x76 - S0_t * x1168 - x1034 * x201 - x1042 * x616 - x1044 * x758 - x1044 * x852 - x1046 * x254 - x1080 * x133 - x1082 * x133 - x109 * x274 * x639 - x1096 * xi - x1098 * xi - x1102 * xi - x1103 * xi - x1104 * xi - x1114 * x659 - x1115 * xi - x1143 - x1153 * x586 - x1155 * x325 - x1158 * x230 - x1167 - x1169 - x1170 - x1171 - x1172 * x249 - x1173 - x1175 - 28 * x1176 * x339 - x1177 - x1178 - x1180 - x1182 - x1183 - x164 * x383 - x166 * x302 - x170 * x302 - x187 * x653 - x198 * x873 - x199 * x385 + 2 * x2 * x27 * x29 * x50 * xi * xi_x - x201 * x21 * x663 - x201 * x475 - x202 * x303 - x21 * x280 * x359 - x21 * x359 * x895 - x21 * x442 * x838 - x217 * x344 - x217 * x403 - x217 * x659 - x233 * x660 - x233 * x666 - x233 * x667 - x249 * x976 - x250 * x432 - x250 * x790 - x272 * x359 - x276 * x419 - x280 * x349 - x282 * x850 + 4 * x29 * x320 * x50 * xi * xi_y + 4 * x29 * x76 * xi * xi_y - x303 * x82 - x340 * x436 - x352 * x393 - x362 * x393 * x48 - x362 * x530 - x386 * x742 - x389 * x855 - x389 * x878 - x399 * x850 - x442 * x770 - x442 * x858 - x523 * x779 - x527 * x779 - x540 * x556 - x540 * x745 - x547 * x708 - x582 * x809 - x594 * x781 - x606 * x871 - x648 * x891 - x684 * x872 - x704 * x872 - x763 - x832 * x984 - x859 * x921) + x51 * (-B * x1108 - B * x1112 - Bp * x1189 - G_y * x450 * x540 + G_y * x913 - S * x1168 + S_y * x651 + x1000 * x919 + 2 * x1002 * x110 + x1005 * x111 * x298 + 2 * x1006 * x110 - x1007 * x111 - x1009 * x907 + x1011 * x459 + x1027 * x924 + x1054 * x888 - x1055 * x1186 - x1068 * x48 - x1072 * x888 + x1075 * x432 + x1077 * x78 + x1093 * x897 + 36 * x1099 * x353 + x1100 * x353 - x1106 * x574 + x1107 * x473 + x1107 * x743 - x111 * x330 * x526 + x1113 * x63 + x1114 * x133 * x376 - x1116 * x254 + x1119 + x1120 + x1126 * x566 - x1127 + x1135 * x276 + x1136 + x1139 + x1159 * x625 + x1160 * x1189 - x1160 * x31 * x731 - x1167 * x133 + x1170 * x133 * x21 - x1170 * x133 - x1178 * x133 + x1179 * x133 - x1180 * x133 + x1181 * x133 - x1182 * x133 + x1184 * x21 - x1184 - x1185 * xi + x1187 * x21 - x1187 - x1188 * x21 + x1188 - x1190 * x886 + x1190 * x896 - x1191 * x21 + x1191 - x1192 * x1193 + x1193 * x320 * x698 - x1194 * x21 + x1194 - x1195 * x609 - x1195 * x904 + x1196 * xi - x1197 * x21 + x1197 + x1198 * x21 - x1198 + x1199 * x1201 - x1199 * x415 - x1200 * x21 + x1200 + x1201 * x893 - x1201 * x902 + x1202 * x21 - x1202 - x1203 * x21 + x1203 - x1204 * x21 + x1204 + x1205 * x21 - x1205 - x1206 * x21 + x1206 - x1207 * x21 + x1207 + x1208 * x21 - x1208 + x1209 * x975 + x1209 * x983 + x1210 * xi - x1211 * x781 - x1212 * x206 + x1213 * x442 + x133 * x292 * x338 * x423 + x151 * x266 * x282 - x160 * x187 * x442 - x164 * x600 - x164 * x614 + x164 * x619 - x164 * x734 + x165 * x894 + x166 * x523 + x166 * x528 - x166 * x636 - x166 * x645 + x170 * x523 + x170 * x527 + x170 * x528 - x170 * x636 - x170 * x645 - x187 * x441 * x538 - x199 * x609 - x206 * x921 - x208 * x662 + x208 * x884 - x209 * x611 - x209 * x898 + x229 * x609 + x231 * x602 + x231 * x611 + x234 * x397 - x234 * x568 + x24 * x959 + x24 * x968 + x272 * x556 - x272 * x660 - x272 * x666 - x272 * x667 + x272 * x745 - x276 * x349 * x514 + x276 * x510 - x282 * x445 + x282 * x470 + x292 * x436 * x555 + x294 * x462 - x297 * x893 + x297 * x902 - x302 * x483 + x302 * x509 + x331 * (S0 * (x596 - x916 + x925) + x1013 * x672 + x116 * (x16 * x27 - x24)) - x340 * x920 - x349 * x353 * x459 - x353 * x795 + x373 * x613 * x63 - x385 * x972 + x390 * x876 - x393 * x497 + x393 * x596 - x397 * x501 - x403 * x596 + x403 * x916 - x415 * x893 + x415 * x902 + x416 * x886 * xi + x419 * x886 - x432 * x886 + x432 * x896 - x442 * x473 - x444 * x628 * x783 + x448 * x514 * x918 + x473 * x494 - x473 * x915 - x500 * x901 + x501 * x602 + x501 * x611 + x501 * x898 - x505 * x618 - x523 * x82 - x527 * x82 - x527 * x914 - x528 * x82 - x548 * x60 * xi_y + x568 * x908 - x569 * x632 * x918 - x596 * x659 + x596 * x969 - x60 * x609 * x918 + x609 * x788 - x618 * x76 - x628 * x876 - x63 * x856 + x633 * x910 + x633 * x912 - x647 * x936 - x790 * x886 + x790 * x896 + x884 * x961) + x515 * (-S * x1047 + S * x1049 - S * x1050 + S * x1053 - S * x1056 + S * x1057 - S * x1058 + S * x1059 + S * x1066 - S * x1067 - S * x1069 + S * x1070 + S * x1071 + S * x1073 - S * x1074 - S * x1076 + 18 * S0_t * x1012 + S0_ty * x481 + 36 * x1003 * x137 * x67 - x1051 + x1052 * x209 - x1052 * x231 - x1054 * x1055 + x1055 * x1072 + x1060 * x208 - x1061 * x577 + x1062 * x21 - x1062 - x1063 * x208 - x1064 * x459 + x1065 * x21 - x1065 - x1068 * x137 + x1075 * x494 + x1077 * x29 + x1078 * x459 + x1079 * x29 * x803 + x209 * x396 - x209 * x474 + x303 * x462 + x333 * x462 - x396 * x501 - x409 * x503 - x418 * x473 + x418 * x688 - x418 * x743 + x457 * x483 - x457 * x509 + x457 * x512 + x473 * x482 * xi - x473 * x499 + x473 * x507 + x474 * x501 + x475 * x497 - x477 * x498 - x48 * x487 * x500 + x491 * x500 - x499 * x743 + x507 * x743) + x55 * (Bp * x1152 - Bp * x782 - G_y * S * x217 + G_y * x774 - S * x564 * x779 - S_y * x761 - x1016 * x729 - x1037 * x907 + x1077 * x109 + x110 * x415 * x524 + x1109 * x50 * x737 + x1109 * x777 - x1117 * x596 - x1118 * x729 + x1119 * xi + x1120 * xi + x1121 * x133 - x1122 * x133 + x1123 * x133 - x1124 * x21 + x1124 + x1125 * x524 - x1125 * x546 + x1126 * x616 - x1127 * xi + x1128 * x1129 - x1129 * x772 - x1130 * x21 + x1130 + x1131 * x21 - x1131 + x1132 * x21 - x1132 - x1133 * x596 - x1134 * x133 + x1135 * x679 + x1136 * xi + x1137 * x50 + x1139 * xi - x1140 * x133 - x1141 * x1142 + x1141 * x353 * x543 + x1142 * x169 * x392 + x1144 * x21 - x1144 + x1145 * x21 - x1145 + x1146 * x21 - x1146 - x1147 * x524 + x1147 * x546 - x1148 * x21 + x1148 + x1149 * x133 - x1150 * x133 + x1151 * x632 - x1152 * x1160 - x1154 * x576 + x1155 * x505 + x1156 * x133 - x1157 * x510 - x1158 * x737 + x1159 * x741 + x1160 * x782 + x1161 * x133 + x1162 * x852 + x1163 * x133 + x1164 * x133 - x1165 * x639 + x164 * x349 * x756 - x164 * x724 + x164 * x725 - x169 * x217 * x609 - x169 * x543 * x701 + x169 * x722 + x178 * x401 * x555 - x179 * x523 - x179 * x527 - x179 * x528 + x179 * x636 + x205 * x517 - x209 * x633 - x214 * x393 + x214 * x403 + x214 * x733 + x229 * x825 + x231 * x633 + x254 * x415 * x758 + x282 * x681 - x294 * x589 * x729 - x315 * x505 * x837 - x320 * x335 * x62 * x706 - x330 * x493 * (x345 + x808) - x339 * x696 * x922 - x349 * x514 * x679 + x353 * x763 - x353 * x765 - x389 * x760 + x393 * x726 - x403 * x711 - x415 * x753 - x445 * x783 + x459 * x884 + x470 * x783 - x473 * x557 + x473 * x781 + x473 * x909 + x501 * x633 - x501 * x769 - x505 * x841 + x508 * x619 - x508 * x734 + x510 * x679 + x523 * x73 + x523 * x786 + x526 * x754 + x526 * x778 + x527 * x73 + x527 * x786 + x556 * x687 - x556 * x738 - x556 * x749 - x557 * x743 + x606 * x761 + x615 * x63 * x729 + x616 * x76 * xi_y + x618 * x776 + x626 * x697 - x645 * x73 - x645 * x786 - x659 * x726 - x660 * x687 + x660 * x738 + x660 * x749 - x666 * x687 + x666 * x738 + x666 * x749 - x677 * x766 + x687 * x745 - x688 * x781 - x700 * x789 - x726 * x787 - x738 * x745 + x743 * x781 - x745 * x749 + x747 * x761 - x76 * x841 - x770 * x921 - x791 * x833 + x803 * (x1166 + x27 * x802 + x805)) + x593 * (B * x362 * x418 + Bp * x290 * x418 - Bp * x290 * x482 * xi + Bp * x588 + G * x217 * x302 + S * x1083 * x539 - S * x1091 * x334 + S0_t * x1017 - S0_t * x1018 + S0_t * x1019 + S0_t * x1021 + S0_t * x1025 + S0_t * x1028 - S0_t * x1030 - S0_t * x1033 + S0_ty * x130 * x429 + x1011 * x560 + x1014 * x29 * x438 - x1020 * x418 - x1022 * x48 - x1023 * x48 - x1024 * x417 * x456 - x1026 * x418 + x1029 * x60 + x1031 * x418 + x1032 * x572 - x1054 * x311 - x1060 * x23 + x1063 * x23 - x1063 * x362 - x1064 * x24 + x1064 * x563 + x1078 * x24 - x1078 * x563 + x1081 * x1095 - x1081 * x561 + x1083 * x235 * x338 + x1088 * x1089 + x1088 * x457 - x1089 * x164 * x24 - x1089 * x580 - x109 * x164 * x475 + x1090 * x21 - x1090 - x1091 * x127 * x609 + x1092 * x344 + x1092 * x403 + x1093 * x566 + x1094 * x127 - x1095 * x359 - x1095 * x367 + x130 * x282 * x410 + x137 * x23 * x534 - x137 * x290 * x344 + x164 * x359 * x576 - x164 * x571 - x164 * x638 + x169 * x457 * x565 + x205 * x583 - x23 * x282 * x486 + x23 * x364 * x450 - x230 * x564 * x582 - x302 * x47 * x72 + x303 * x585 - x31 * x568 * x63 - x31 * x582 * x819 - x320 * x47 * x487 - x340 * x427 - x349 * x578 * x67 - x352 * x358 - x353 * x584 - x359 * x559 + x359 * x561 + x360 * x396 - x362 * x591 - x366 * x396 - x367 * x559 + x367 * x561 - x368 * x396 + x368 * x474 + x371 * x456 * x575 + x410 * x482 * x67 + x429 * x457 * x67 + x448 * x590 - x457 * x580 + x457 * x587 + x560 * x755 + x565 * x573 - x581 * x590)

#println("Matrix C11 = $C11 and the source is $S0")
    nothing
end


function Sd_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    (
       S0, S0_x, S0_y, S0_t, S0_tx, S0_ty,S0_xx, S0_yy, S0_xy, S0_txx, S0_tyy, S0_txy, u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B     ,        G      ,        S      ,    Fx     ,    Fy     ,
        Bp    ,        Gp     ,        Sp     ,    Fxp    ,    Fyp    ,
        Bpp   ,        Gpp    ,        Spp    ,    Fxpp   ,    Fypp   ,
        B_x   ,        G_x    ,        S_x    ,    Fx_x   ,    Fy_x   ,
        B_y   ,        G_y    ,        S_y    ,    Fx_y   ,    Fy_y   ,
        Bp_x  ,        Gp_x   ,        Sp_x   ,    Fxp_x  ,    Fyp_x  ,
        Bp_y  ,        Gp_y   ,        Sp_y   ,    Fxp_y  ,    Fyp_y  ,
        B_xx  ,        G_xx   ,        S_xx   ,
        B_yy  ,        G_yy   ,        S_yy   ,
                        G_xy   ,        S_xy  
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Sp")
    @tilde_inner("Fxp")
    @tilde_inner("Fyp")
    @tilde_inner("Bp")
    @tilde_inner("Sp")
    @tilde_inner("Gp")

    @hat_inner("Sp")
    @hat_inner("Fxp")
    @hat_inner("Fyp")
    @hat_inner("Gp")
    @hat_inner("Bp")
    @hat_inner("Gp")

    @cross_inner("G")
    @cross_inner("S")

x0 = S0 * xi
x1 = u ^ 3
x2 = S * x1
x3 = S0 + S0_t * u + u * x0 + x2
x4 = B * x1
x5 = exp(x4)
x6 = u ^ 2
x7 = 8 * x6
x8 = x5 * x7
x9 = S * x6
x10 = S0_t + x0
x11 = 1 / u
x12 = S0 * x11 + x10 + x9
x13 = x12 ^ 3
x14 = 8 * S0
x15 = x5 * x6
x16 = 4 * S0
x17 = Sp * x6
x18 = S0 + x17 - 2 * x2
x19 = x12 ^ 2
x20 = x19 * x5
x21 = x18 * x20
x22 = S0 ^ 3
x23 = 1 / x22
x24 = 8 * S0_t * x22
x25 = S0 ^ 4
x26 = x23 * (x24 + 8 * x25 * xi)
x27 = G * x1
x28 = cosh(x27)
x29 = Fx * u
x30 = S0 ^ 2
x31 = 1 / x30
x32 = S0 * S0_tx
x33 = S0_t * S0_x
x34 = x32 - x33
x35 = x31 * x34
x36 = x29 + x35 + xi_x
x37 = Sp * x36 + St
x38 = S0 * xi_x + S0_tx + S0_x * x11 + S0_x * xi - x18 * x36 + x37 * x6
x39 = 4 * x6
x40 = x19 * x6
x41 = Fy * u
x42 = S0 * S0_ty
x43 = S0_t * S0_y
x44 = x42 - x43
x45 = x31 * x44
x46 = x41 + x45 + xi_y
x47 = Sh + Sp * x46
x48 = S0 * xi_y + S0_ty + S0_y * x11 + S0_y * xi - x18 * x46 + x47 * x6
x49 = sinh(x27)
x50 = x38 * x49
x51 = Fx * x6
x52 = -Fxp * u + x51
x53 = -x52
x54 = Fy * x6
x55 = -Fyp * u + x54
x56 = -x55
x57 = Fxh + Fxp * x46
x58 = Fyp * x36 + Fyt
x59 = 2 * x1
x60 = 2 * x6
x61 = Fy * x59 - Fyp * x60 + Fypp * u
x62 = Fx * x59 - Fxp * x60 + Fxpp * u
x63 = Gh + Gp * x46
x64 = x1 * x63
x65 = u ^ 4
x66 = 3 * x65
x67 = -G * x66 + Gp * x1
x68 = x46 * x67
x69 = x64 - x68
x70 = Gp * x36 + Gt
x71 = x1 * x70
x72 = 2 * x71
x73 = 6 * x65
x74 = -G * x73 + 2 * Gp * x1
x75 = x20 * x60
x76 = -12 * G * x65 + 4 * Gp * x1
x77 = 4 * S0_xx
x78 = x36 ^ 2
x79 = Spp * x36
x80 = Spt + x79
x81 = 2 * x32 - 2 * x33
x82 = 2 * x29 + 2 * xi_x
x83 = x31 * x81 + x82
x84 = S0_x - x37 * x59 + x6 * x80
x85 = 2 * S0_x * x23
x86 = Fxp * x36 + Fxt
x87 = u * x86 + x31 * (S0 * S0_txx - S0_t * S0_xx) - x34 * x85 - x36 * x53 + xi_xx
x88 = S * x73 - 4 * Sp * x1 + Spp * x6
x89 = -x36 * x88 + x84
x90 = Bp * x36 + Bt
x91 = -B * x66 + Bp * x1
x92 = x36 * x91
x93 = x1 * x90 - x92
x94 = x12 * x6
x95 = Gph + Gpp * x46
x96 = 2 * x1 * x95 - x63 * x73
x97 = 2 * x41 + 2 * xi_y
x98 = 2 * x45 + x97
x99 = Gpp * x36
x100 = Gpt + x99
x101 = 12 * u ^ 5
x102 = G * x101 - Gp * x73 + Gpp * x1
x103 = x1 * x100 - x102 * x36 - x66 * x70
x104 = x36 * x67
x105 = -x104 + x71
x106 = Bh + Bp * x46
x107 = x1 * x106
x108 = x107 - x46 * x91
x109 = S0_y * x23
x110 = S0_ty * S0_x
x111 = S0_tx * S0_y
x112 = S0 * S0_txy - S0_t * S0_xy
x113 = u * x57 + u * x58 - x109 * x81 + x31 * (-x110 + x111 + x112) + x31 * (x110 - x111 + x112) - x36 * x56 - x44 * x85 - x46 * x53 + 2 * xi_xy
x114 = 4 * x48
x115 = 8 * xi_y
x116 = 8 * S0_xy
x117 = 8 * S0_y
x118 = Sph + Spp * x46
x119 = x118 * x6
x120 = 2 * x35 + x82
x121 = -B * x73 + 2 * Bp * x1
x122 = 2 * u
x123 = Bpp * x36 + Bpt
x124 = B * x101 - Bp * x73 + Bpp * x1
x125 = 4 * S0_yy
x126 = x46 ^ 2
x127 = x31 * (2 * x42 - 2 * x43) + x97
x128 = S0_y + x119 - x47 * x59
x129 = 4 * x46
x130 = Fyh + Fyp * x46
x131 = u * x130 - 2 * x109 * x44 + x31 * (S0 * S0_tyy - S0_t * S0_yy) - x46 * x56 + xi_yy
x132 = Bph + Bpp * x46
ABCS[1] = 0
ABCS[2] = -x3 ^ 3 * x8
ABCS[3] = -x3 ^ 2 * x8 * (-Sp * u + x10 + 3 * x9)

if u==0.0
	ABCS[4] = 4*S0^3*Sp
else
	ABCS[4] = u * x13 * x14 * x5 + u * x21 * x26 - 12 * x12 ^ 4 * x15 + x13 * x15 * x26 + x16 * x21 + x18 * x23 * x40 * x5 * (4 * S0_t ^ 2 * x30 + 4 * S0_x ^ 2 - S0_xx * x16 + 4 * S0_y ^ 2 - S0_yy * x16 + x24 * xi + 4 * x25 * xi ^ 2) - x28 * x38 ^ 2 * x39 + x28 * x75 * (x103 * x98 + x105 * (-x108 - x55) + x113 * x67 + x36 * x96 - x59 * (Gc + x100 * x46 + x36 * x95 + x46 * x99) + x69 * (x1 * x90 - x52 - x92)) + x40 * (x28 * (2 * x105 ^ 2 + x120 * x62 + x120 * (x1 * x123 - x124 * x36 - x66 * x90) + x121 * x87 - x122 * (Fxpp * x36 + Fxpt) + x36 * (2 * x1 * x123 - x73 * x90) + x53 ^ 2 - x59 * (Bb - Bpp * x78 + x123 * x83) + x60 * x86 + 2 * x93 ^ 2 + x93 * (2 * Fxp * u - 2 * x51)) + x49 * (2 * x1 * (Gb - Gpp * x78 + x100 * x83) - x103 * x120 - x36 * (2 * x1 * x100 - x70 * x73) - x74 * x87 - (-2 * x104 + x72) * (2 * x1 * x90 - x121 * x36 - x52))) + x48 * x50 * x8 + x49 * x75 * (u * (Fxph + Fxpp * x46) + u * (Fypp * x36 + Fypt) - x36 * x61 - x46 * x62 - x53 * x56 - x57 * x6 - x58 * x6 - x69 * (-x36 * x74 + x72)) + x5 * x94 * (x28 * (-x105 * x114 - 4 * x38 * x69) + x49 * (-8 * S0_txy - S0_x * x115 - x11 * x116 + x113 * (x16 + 4 * x17 - 8 * x2) - x116 * xi - x117 * xi_x - x14 * xi_xy + x36 * (-16 * x1 * x47 + x117 + 8 * x119) - x7 * (Sc + x118 * x36 + x46 * x79 + x46 * x80) + x89 * (x115 + 8 * x41 + 8 * x45))) + x6 * (x12 * (x28 * (4 * S0_tyy + x108 * x114 + x11 * x125 + x117 * xi_y + x125 * xi - x128 * x129 - x129 * (x128 - x46 * x88) - 4 * x131 * x18 + x16 * xi_yy + x39 * (Spp * x126 + Ss + x118 * x127)) + x48 * x49 * (-x46 * x76 + 4 * x64)) + x19 * (x28 * (2 * x108 ^ 2 - x108 * (2 * Fyp * u - 2 * x54) - x121 * x131 - x122 * (Fyph + Fypp * x46) + x130 * x60 - x46 * (2 * x1 * x132 - x106 * x73) + x56 ^ 2 + x59 * (Bpp * x126 + Bs + x127 * x132) + x61 * x98 + 2 * x69 ^ 2 - x98 * (x1 * x132 - x106 * x66 - x124 * x46)) + x49 * (2 * x1 * (Gpp * x126 + Gs + x127 * x95) - x131 * x74 - x46 * x96 - x98 * (x1 * x95 - x102 * x46 - x63 * x66) + (2 * x64 - 2 * x68) * (2 * x107 - x121 * x46 + x55))) - 4 * x28 * x48 ^ 2) * exp(2 * x4) + x94 * (-x28 * (-4 * S0_txx - 8 * S0_x * xi_x - x11 * x77 - x16 * xi_xx + 4 * x18 * x87 + 4 * x36 * x84 + 4 * x36 * x89 + 4 * x38 * x93 - x39 * (Sb - Spp * x78 + x80 * x83) - x77 * xi) + x50 * (-x36 * x76 + 4 * x71))    
end
	

    nothing
end




# this is another coupled equation, for Bd and Gd. the notation used is
#
# ( A11 d_uu Bd + A12 d_uu Gd + B d_u Bd + B2 d_u Gd + C11 Bd + C12 Gd ) = -S1
# ( A21 d_uu Bd + A22 d_uu Gd + B21 d_u Bd + B22 d_u Gd + C21 Bd + C22 Gd ) = -S2

function BdGd_eq_coeff!(AA::Matrix, BB::Matrix, CC::Matrix, SS::Vector, vars::Tuple, ::Inner)
    (
        S0, S0_x, S0_y, S0_t, S0_tx, S0_ty,S0_xx, S0_yy, S0_xy, S0_txx, S0_tyy, S0_txy, u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B     ,       G      ,        S      ,    Fx     ,    Fy     ,  Sd,
        Bp    ,       Gp     ,        Sp     ,    Fxp    ,    Fyp    ,
        Bpp   ,       Gpp    ,        Spp    ,    Fxpp   ,    Fypp   ,
        B_x   ,       G_x    ,        S_x    ,    Fx_x   ,    Fy_x   ,
        B_y   ,       G_y    ,        S_y    ,    Fx_y   ,    Fy_y   ,
        Bp_x  ,       Gp_x   ,        Sp_x   ,    Fxp_x  ,    Fyp_x  ,
        Bp_y  ,       Gp_y   ,        Sp_y   ,    Fxp_y  ,    Fyp_y  ,
        B_xx  ,       G_xx   ,        S_xx   ,
        B_yy  ,       G_yy   ,        S_yy   ,
                       G_xy   ,        S_xy
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Fxp")
    @tilde_inner("Fyp")

    @hat_inner("Fxp")
    @hat_inner("Fyp")

    @cross_inner("G")
    @cross_inner("S")

   

   x0 = u .^ 3
x1 = B .* x0
x2 = exp(x1)
x3 = 8 * x2
x4 = u .^ 2
x5 = S0_t .* u
x6 = u .* xi
x7 = S0 .* x6
x8 = S .* x0
x9 = S0 + x7 + x8
x10 = x5 + x9
x11 = x10 .^ 3
x12 = x11 .* x4
x13 = x10 .^ 2
x14 = G .* x0
x15 = tanh(x14)
x16 = 3 * u
x17 = G .* x16
x18 = x15 .* x4 .* (-Gp + x17)
x19 = S0 + 2 * x7
x20 = x11 .* (B .* x16 - Bp)
x21 = sech(x14)
x22 = S0 .* x21
x23 = -Fxp
x24 = Fx .* u
x25 = x23 + x24
x26 = -x25
x27 = S0 .^ 2
x28 = x6 + 1
x29 = 2 * x8
x30 = x27 .* x28 + x5 .* (S0 - x29)
x31 = S0_x .* x30
x32 = 2 * x4
x33 = S .* x32
x34 = S0_tx .* x33
x35 = 2 * S0
x36 = S .* x35 .* x4
x37 = x36 .* xi_x
x38 = St .* u
x39 = Fx .* S0
x40 = Fx .* x29
x41 = S0 .* x4
x42 = 4 * x26 .* (x31 + x41 .* (S0 .* (x38 - x39 + x40) + x34 + x37))
x43 = 2 * x24
x44 = x23 + x43
x45 = -x44
x46 = 2 * x5
x47 = S0_tx .* u
x48 = 5 * x4
x49 = x10 .* (S0 .* (-Fxpt .* x35 + 2 * S0 .* u .* x44 .* xi_x + S0 .* u .* (Fx .^ 2 .* x48 + Fxp .^ 2 - 4 * Fxp .* x24 + 2 * Fxt) - 2 * x45 .* x47) + S0_x .* x45 .* x46)
x50 = 6 * u
x51 = S0 .^ 4
x52 = S0 .^ 3
x53 = 2 * x0
x54 = x13 .* x2
x55 = x54 .* (S0_t .^ 2 .* x27 .* x4 + S0_x .^ 2 .* x4 - S0_xx .* x41 + S0_y .^ 2 .* x4 - S0_yy .* x41 + Sd .* x52 .* x53 + x28 .* x46 .* x52 + x4 .* x51 .* xi .^ 2 + 2 * x51 .* x6 + x51) ./ u
x56 = Fy .* u
x57 = S0_y .* x30
x58 = S0_ty .* x33
x59 = x36 .* xi_y
x60 = Sh .* u
x61 = Fy .* S0
x62 = Fy .* x29
x63 = -Fyp
x64 = 2 * x56 + x63
x65 = -x64
x66 = S0_ty .* u
x67 = (x10 .* (S0 .* (-Fyph .* x35 + 2 * S0 .* u .* x64 .* xi_y + S0 .* u .* (Fy .^ 2 .* x48 + 2 * Fyh + Fyp .^ 2 - 4 * Fyp .* x56) - 2 * x65 .* x66) + S0_y .* x46 .* x65) + (4 * Fyp - 4 * x56) .* (x41 .* (S0 .* (x60 - x61 + x62) + x58 + x59) + x57)) .* exp(2 * x1)
x68 = Fy .* Gp
x69 = -3 * Fyp .* G + x68
x70 = 3 * G
x71 = Fxp .* x70
x72 = Fx .* Gp - x71
x73 = Gp .* S0
x74 = Fyp .* S0
x75 = Gh .* S0
x76 = Fxh .* S0
x77 = Fyp .* S0_tx
x78 = Fyt .* S0
x79 = x39 .* x4
x80 = x4 .* x61
x81 = S0 .* u
x82 = x81 .* xi_y
x83 = x81 .* xi_x
x84 = x10 .* x2 .* x35
x85 = u ./ x52
x86 = 4 * x2
x87 = 4 * u
x88 = S0 .* sinh(x14)
x89 = x56 + x63
x90 = Fy .* x27
x91 = Fxp .* S0
x92 = u .^ 4
x93 = x61 .* x92
x94 = Fyp .* x39
x95 = Fxp .* x61
x96 = cosh(x14)
x97 = 3 * x1
x98 = Fxp .* x97
x99 = Bp .* x4
x100 = Fyp .* x97 + Fyp - x56 .* (x99 + 2)
x101 = Fy .* S0_tx
x102 = S0_ty .* x92
x103 = Bp .* x0
x104 = 3 * B
x105 = x104 .* x92
x106 = Fxp .* x104
x107 = u .^ 5
AA[1,1] = 0
AA[1,2] = 0
BB[1,1] = -x12 .* x3
BB[1,2] = 0
CC[1,1] = -u .* x13 .* x3 .* (-Sp .* x4 + x18 .* x9 + x19 + x5 .* (x18 + 2) + 4 * x8)
CC[1,2] = -x0 .* x15 .* x20 .* x3
SS[1] = 2 * x85 .* (x0 .* x21 .* x84 .* (S0 .* (Fxh .* x73 - Fxp .* S0_ty .* x17 - Fxp .* x75 + Fyp .* x70 .* x79 - Fyt .* x73 + Gp .* S0_ty .* x24 - Gt .* u .* x61 + Gt .* x74 - x17 .* x76 + x17 .* x77 + x17 .* x78 + x24 .* x75 - x47 .* x68 - x69 .* x83 - x71 .* x80 + x72 .* x82) + x5 .* (S0_x .* x69 - S0_y .* x72)) + x22 .* x42 + x22 .* x49 - x22 .* x67 - x55 .* (B .* x50 - 2 * Bp))
AA[2,1] = 0
AA[2,2] = 0
BB[2,1] = 0
BB[2,2] = -x12 .* x86
CC[2,1] = x2 .* x20 .* x53 .* sinh(2 * x14)
CC[2,2] = -x54 .* x87 .* (x19 + x4 .* (S .* x87 - Sp) + x46)
SS[2] = -x85 .* (S0 .* x86 .* x96 .* (S0 .* x4 .* (Fx .* Fyp .* x27 + 4 * Fx .* S .* x93 - Fxp .* x58 + Fxp .* x90 - Fyp .* x34 + S0_tx .* x62 + S0_ty .* x40 + Sh .* x79 + St .* x80 + x25 .* x59 - x29 .* x94 - x29 .* x95 + x37 .* x89 - x38 .* x74 - x43 .* x90 - x60 .* x91) - x26 .* x57 + x31 .* x89) + x42 .* x88 + x49 .* x88 - x55 .* (-G .* x50 + 2 * Gp) + x67 .* x88 + x84 .* x96 .* (S0 .* (-Bh .* x0 .* x91 + Bh .* x39 .* x92 + Bp .* Fx .* x102 - Bp .* x101 .* x92 + Bt .* x0 .* x74 - Bt .* x93 - Fx .* S0_ty .* x32 - 5 * Fx .* x0 .* x61 - Fxh .* x81 - Fxp .* Fyp .* x81 + Fxp .* x66 + Fxph .* S0 + Fyp .* x47 + Fypt .* S0 - Fyt .* x81 + x100 .* x83 - x101 .* x32 - x102 .* x106 + x103 .* x76 - x103 .* x78 + x104 .* x107 .* x94 - x105 .* x76 + x105 .* x77 + x105 .* x78 - x106 .* x107 .* x61 + x32 .* x94 + x32 .* x95 + x82 .* (Bp .* Fx .* x0 - x44 - x98)) - x5 .* (S0_x .* x100 + S0_y .* (Fxp + x24 .* (x99 - 2) - x98))))

    
    nothing
end



function A_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    (
        S0, S0_x, S0_y, S0_t, S0_tx, S0_ty,S0_xx, S0_yy, S0_xy, S0_txx, S0_tyy, S0_txy,u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B   ,  G   ,  S    , Fx    , Fy    , Sd, Bd, Gd,
        Bp  ,  Gp  ,  Sp   , Fxp   , Fyp   ,
        Bpp ,  Gpp ,  Spp  , Fxpp  , Fypp  ,
        B_x ,  G_x ,  S_x  , Fx_x  , Fy_x  ,
        B_y ,  G_y ,  S_y  , Fx_y  , Fy_y  ,
        Bp_x,  Gp_x,  Sp_x , Fxp_x , Fyp_x ,
        Bp_y,  Gp_y,  Sp_y , Fxp_y , Fyp_y ,
        B_xx,  G_xx,  S_xx ,
        B_yy,  G_yy,  S_yy ,
                G_xy,  S_xy
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Fxp")
    @tilde_inner("Fyp")
    @tilde_inner("Sp")
    @tilde_inner("Gp")
    @tilde_inner("Bp")

    @hat_inner("Bp")
    @hat_inner("Gp")
    @hat_inner("Sp")
    @hat_inner("Fxp")
    @hat_inner("Fyp")

    @cross_inner("G")
    @cross_inner("S")


  x0 = u ^ 3
x1 = 2 * x0
x2 = B * x0
x3 = exp(x2)
x4 = S0 * xi
x5 = S * x0
x6 = (S0 + S0_t * u + u * x4 + x5) ^ 4
x7 = x3 * x6
x8 = u ^ 2
x9 = x3 * x8
x10 = S * x8
x11 = 1 / u
x12 = S0 * x11
x13 = S0_t + x10 + x12 + x4
x14 = x13 ^ 4
x15 = 4 * x8
x16 = G * x0
x17 = cosh(x16)
x18 = S0 * xi_x
x19 = S0_x * xi
x20 = S0_x * x11
x21 = Fx * u
x22 = S0 ^ 2
x23 = 1 / x22
x24 = S0 * S0_tx
x25 = S0_t * S0_x
x26 = x24 - x25
x27 = x23 * x26
x28 = x21 + x27 + xi_x
x29 = Sp * x28 + St
x30 = x29 * x8
x31 = Sp * x8
x32 = S0 + x31 - 2 * x5
x33 = S0_tx + x18 + x19 + x20 - x28 * x32 + x30
x34 = sinh(x16)
x35 = Gp * x28 + Gt
x36 = x0 * x35
x37 = u ^ 4
x38 = G * x37
x39 = 4 * Gp * x0 - 12 * x38
x40 = 4 * S0
x41 = 4 * S0_xx
x42 = x28 ^ 2
x43 = Spp * x28
x44 = Spt + x43
x45 = 2 * x24 - 2 * x25
x46 = 2 * xi_x
x47 = 2 * x21 + x46
x48 = x23 * x45 + x47
x49 = S0_x - x1 * x29 + x44 * x8
x50 = S0 ^ 3
x51 = 1 / x50
x52 = 2 * S0_x * x51
x53 = Fx * x8
x54 = Fxp * u - x53
x55 = u * (Fxp * x28 + Fxt) + x23 * (S0 * S0_txx - S0_t * S0_xx) - x26 * x52 - x28 * x54 + xi_xx
x56 = 6 * x37
x57 = 4 * x0
x58 = S * x56 - Sp * x57 + Spp * x8
x59 = -x28 * x58 + x49
x60 = Bp * x28 + Bt
x61 = x0 * x60
x62 = 3 * x37
x63 = -B * x62 + Bp * x0
x64 = -x28 * x63 + x61
x65 = x13 ^ 2
x66 = Gpp * x28
x67 = Gpt + x66
x68 = 2 * Gp * x0 - 6 * x38
x69 = 2 * x27 + x47
x70 = 12 * u ^ 5
x71 = G * x70 - Gp * x56 + Gpp * x0
x72 = x0 * x67 - x28 * x71 - x35 * x62
x73 = Gp * x0 - 3 * x38
x74 = -x28 * x73 + x36
x75 = -B * x56 + 2 * Bp * x0
x76 = 2 * x75
x77 = Bpp * x28 + Bpt
x78 = B * x70 - Bp * x56 + Bpp * x0
x79 = Fy * u
x80 = S0 * S0_ty
x81 = S0_t * S0_y
x82 = x80 - x81
x83 = x23 * x82
x84 = x79 + x83 + xi_y
x85 = Sh + Sp * x84
x86 = S0 * xi_y + S0_ty + S0_y * x11 + S0_y * xi - x32 * x84 + x8 * x85
x87 = Gh + Gp * x84
x88 = x0 * x87
x89 = x34 * x86
x90 = 4 * S0_yy
x91 = x84 ^ 2
x92 = Sph + Spp * x84
x93 = 2 * xi_y
x94 = 2 * x79 + x93
x95 = x23 * (2 * x80 - 2 * x81) + x94
x96 = x8 * x92
x97 = S0_y - x1 * x85 + x96
x98 = 4 * x84
x99 = 2 * S0_y
x100 = -Fy * x8 + Fyp * u
x101 = u * (Fyh + Fyp * x84) - x100 * x84 + x23 * (S0 * S0_tyy - S0_t * S0_yy) - x51 * x82 * x99 + xi_yy
x102 = Bh + Bp * x84
x103 = x0 * x102
x104 = x103 - x63 * x84
x105 = Gph + Gpp * x84
x106 = 2 * x0 * x105 - x56 * x87
x107 = 2 * x83 + x94
x108 = x73 * x84
x109 = -x108 + x88
x110 = Bph + Bpp * x84
x111 = 2 * x73
x112 = 2 * x8
x113 = -16 * S * x0 + 8 * S0 + 8 * x31
x114 = 2 * xi_xy
x115 = 2 * S0_xy
x116 = S0_ty * S0_x
x117 = S0_tx * S0_y
x118 = S0 * S0_txy - S0_t * S0_xy
x119 = -S0_y * x45 * x51 + u * (Fxh + Fxp * x84) + u * (Fyp * x28 + Fyt) - x100 * x28 + x114 + x23 * (-x116 + x117 + x118) + x23 * (x116 - x117 + x118) - x52 * x82 - x54 * x84
x120 = 8 * S0_t * x50
x121 = S0 ^ 4
x122 = x51 / 8
ABCS[1] = x1 * x7
ABCS[2] = 8 * x6 * x9
ABCS[3] = 4 * u * x7
if u == 0.0 
	ABCS[4] = -4*S0^3*Sp
else
	ABCS[4] = x13 * x8 * (x17 * (-4 * S0_txx - 8 * S0_x * xi_x - x11 * x41 - x15 * (Sb - Spp * x42 + x44 * x48) + 4 * x28 * x49 + 4 * x28 * x59 + 4 * x32 * x55 + 4 * x33 * x64 - x40 * xi_xx - x41 * xi) + x33 * x34 * (x28 * x39 - 4 * x36)) + x14 * x15 * x3 + x15 * x17 * x33 ^ 2 + x65 * x8 * (x17 * (2 * x0 * (Bb - Bpp * x42 + x48 * x77) - x28 * (2 * x0 * x77 - x56 * x60) + x54 ^ 2 - x55 * x75 - 2 * x64 ^ 2 - x69 * (x0 * x77 - x28 * x78 - x60 * x62) - 2 * x74 ^ 2) + x34 * (-x1 * (Gb - Gpp * x42 + x48 * x67) + x28 * (2 * x0 * x67 - x35 * x56) + x55 * x68 + x69 * x72 + x74 * (-x28 * x76 + 4 * x61))) + x8 * (x13 * (-x17 * (4 * S0_tyy + 8 * S0_y * xi_y - 4 * x101 * x32 + 4 * x104 * x86 + x11 * x90 + x15 * (Spp * x91 + Ss + x92 * x95) + x40 * xi_yy + x90 * xi - x97 * x98 - x98 * (-x58 * x84 + x97)) + x89 * (x39 * x84 - 4 * x88)) + 4 * x17 * x86 ^ 2 + x65 * (x17 * (-x1 * (Bpp * x91 + Bs + x110 * x95) + x100 ^ 2 + x101 * x75 - 2 * x104 ^ 2 + x107 * (x0 * x110 - x102 * x62 - x78 * x84) - 2 * x109 ^ 2 + x84 * (2 * x0 * x110 - x102 * x56)) + x34 * (-x1 * (Gpp * x91 + Gs + x105 * x95) + x101 * x68 + x106 * x84 + x107 * (x0 * x105 - x62 * x87 - x71 * x84) - x109 * (4 * x103 - x76 * x84)))) * exp(2 * x2) + x9 * (x14 * (Bd * x112 * x17 ^ 2 * x63 + Gd * x111 * x8) + x65 * (-x113 * (S0 / (2 * x8) + Sd * u + x11 * x122 * (x120 + 8 * x121 * xi) + x122 * (4 * S0_t ^ 2 * x22 + 4 * S0_x ^ 2 - S0_xx * x40 + 4 * S0_y ^ 2 - S0_yy * x40 + x120 * xi + 4 * x121 * xi ^ 2)) + x17 * (4 * x0 * (Gc + x105 * x28 + x66 * x84 + x67 * x84) + 2 * x104 * x74 - 2 * x106 * x28 - 2 * x107 * x72 - 2 * x109 * x64 - x111 * x119) + x34 * (x100 * (-2 * Fxp * u + 2 * x53) + (-2 * x108 + 2 * x88) * (-x28 * x68 + 2 * x36))) - x89 * (8 * S0_tx - x113 * x28 + 8 * x18 + 8 * x19 + 8 * x20 + 8 * x30) + (x17 * (x109 * x33 + x74 * x86) + x34 * (S0 * x114 + 2 * S0_txy + S0_x * x93 + S0_y * x46 - x107 * x59 + x11 * x115 + x112 * (Sc + x28 * x92 + x43 * x84 + x44 * x84) + x115 * xi - x119 * x32 - x28 * (-x57 * x85 + 2 * x96 + x99))) * (4 * S0_t + 4 * x10 + 4 * x12 + 4 * x4))
end
    nothing
end
